//
//  ProductsManager.m
//  STO
//
//  Created by  rjt on 16/3/22.
//  Copyright © 2016年 JYZD. All rights reserved.
//

#import "ProductsManager.h"
#import "GetTimeEntity.h"
#import "ProductBargainDeclaredMock.h"
#import "ProductBargainFixMock.h"
#import "CheckBuyQualificationMock.h"
#import "CheckBuyQualificationEntity.h"
#import "ProductPanKouMock.h"
#import "SellingListMock.h"
#import "SellingListEntity.h"
#import "ProfitMock.h"
#import "SellOrderMock.h"

@implementation ProductsManager

static ProductsManager *_singleAccount = nil;

+ (instancetype)shareProductsManager
{
    
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _singleAccount = [[self alloc]init];
        [_singleAccount initMock];

    });
    return _singleAccount;
}

-(void)initMock{
    self.hqMock = [HqMock mock];
    self.hqParam = [HqParam param];
    self.shHqMock = [ProductPanKouMock mock];
    self.shHqParam = [ProductPanKouParam param];
    _timeMock = [GetTimeMock mock];
    _timeParam = [GetTimeParam param];
    
    _profitMock = [ProfitMock mock];
    _profitParam = [ProfitParam param];
    
    self.detailMock = [DetailMock mock];
    self.detailParam = [DetailParam param];
    
    self.checkBuyQualificationMock = [CheckBuyQualificationMock mock];
    self.checkBuyQualificationParam = [CheckBuyQualificationParam param];
    
    self.qualificationLevelMock = [QualificationLevelMock mock];
    self.qualificationLevelParam = [QualificationLevelParam param];
    
    self.articleSampleListMock = [ArticlesamplelistMock mock];
    self.articleSampleListParam = [AtriclesamplelistParam param];
    
    self.productBargainListMock=[ProductBargainListMock mock];
    self.productBargainListParam=[ProductBargainListParam param];
  
    self.productBargainFixMock=[ProductBargainFixMock mock];
    self.productBargainFixParam=[ProductBargainFixParam param];
    
    self.buyingListMock = [BuyingListMock mock];
    self.buyingListParam = [BuyingListParam param];
    
    self.todoListMock = [TodoListMock mock];
    self.todoListParam = [TodoListParam param];
    
    self.sellingListMock = [SellingListMock mock];
    self.sellingListParam = [SellingListParam param];
    
    self.settlementsMock = [SettlementsMock mock];
    self.settlementsParam = [SettlementsParam param];
    
    self.doSettleMock = [DoSettleMock mock];
    self.doSettleParam = [DoSettleParam param];
    
    self.declareMock = [ProductBargainDeclaredMock mock];
    self.declareParam = [ProductBargainDeclaredParam param];
    
    self.detailMock = [DetailMock mock];
    self.detailParam = [DetailParam param];
    
    self.dealHistoryMock = [DealHistoryMock mock];
    self.dealHistoryParam = [DealHistoryParam param];
<<<<<<< .mine
    
    self.sellOrderMock = [SellOrderMock mock];
    self.sellOrderParam = [SellOrderParam param];
=======
    
    self.profitMock = [ProfitMock mock];
    self.profitParam = [ProfitParam param];
    
    self.policyListMock=[PolicyListMock mock];
    self.policyListParam=[PolicyListParam param];
    
    self.schemeDetailMock=[SchemeDetailMock mock];
    self.schemeDetailParam=[SchemeDetailParam param];
    
    self.preSimpleCheckMock=[PreSimpleCheckMock mock];
    self.preSimpleCheckParam=[PreSimpleCheckParam param];
    
    self.prePolicyCheckMock=[PrePolicyCheckMock mock];
    self.prePolicyCheckParam=[PrePolicyCheckParam param];
    
    self.createPolicyMock=[CreatePolicyMock mock];
    self.createPolicyParam=[CreatePolicyParam param];
>>>>>>> .r3165
}


/** 获取等待列表最新行情 **/
-(void)refreshHQWithCode:(NSString*)code Block:(ManagerReturnBlock)returnBlock{
    self.hqParam.code = code;
    if (code!=nil&&![code isEqualToString:@""]) {
        self.hqMock.returnBlock =^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
            if(returnBlock!=nil){
                returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
            }
        };
        [self.hqMock run:self.hqParam ignoreError:YES];
    }
}

-(void)refreshSHHQWithBlock:(ManagerReturnBlock)returnBlock{
    self.shHqParam.code = @"000001";
    self.shHqParam.excode = @"SH";
    self.shHqMock.returnBlock =^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.shHqMock run:self.shHqParam ignoreError:YES];
}




-(NSInteger)getServerTime{
    return ([[NSDate date] timeIntervalSince1970] - self.localTime)+self.serverTime;
}

-(void)syncServerTime{
    DEFINED_WEAK_SELF
    self.timeMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,QUMock *mock){
        if ([response.pEntity isKindOfClass:[GetTimeEntity class]]) {
            GetTimeEntity*  e = (GetTimeEntity*)response.pEntity;
            if ([e.time integerValue]>0) {
                _self.serverTime = [e.time integerValue];
                _self.localTime = [[NSDate date] timeIntervalSince1970];
            }
        }
        if (_self.serverTime<=0) {
            dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                [_self syncServerTime];
            });
        }
    };
    [self.timeMock run:self.timeParam ignoreError:YES];
}

-(void)checkBuyQualify:(ManagerReturnBlock)returnBlock{
    self.checkBuyQualificationParam.p_type = @"stock";
    self.checkBuyQualificationMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,QUMock *mock){
        //        if ([response.pEntity isKindOfClass:[CheckBuyQualificationEntity class]]) {
        //            _checkEntity = (CheckBuyQualificationEntity*)response.pEntity;
        //        }
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.checkBuyQualificationMock run:self.checkBuyQualificationParam];
}


-(void)checkLevel:(ManagerReturnBlock)returnBlock{
    self.qualificationLevelMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,QUMock *mock){
        if ([response.pEntity isKindOfClass:[QualificationLevelEntity class]]) {
            _qualificationLevelEntity = (QualificationLevelEntity*)response.pEntity;
        }
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.qualificationLevelMock run:self.qualificationLevelParam];
}


//投资人合作协议列表
-(void)getArticleSamplelistInfo:(ManagerReturnBlock)returnBlock
{
    self.articleSampleListParam.user_type = @"1";
    self.articleSampleListParam.p_type = @"all";
    self.articleSampleListMock.returnBlock = ^(QUNetAdaptor *adaptor, QUNetResponse *response, QUMock *mock){
        
        if (returnBlock != nil) {
            
            returnBlock([BaseManager convertResult:adaptor response:response], mock, response.pEntity);
        }
        
    };
    [self.articleSampleListMock run:self.articleSampleListParam];
}


/*获取异议申报列表*/
-(void)getBargainListWithPage:(int)pageNo  block:(ManagerReturnBlock)returnBlock{
    
    self.productBargainListParam.start_id = [NSString stringWithFormat:@"%d",pageNo];
    self.productBargainListParam.p_type = @"all";
    self.productBargainListMock.returnBlock =^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    
    [self.productBargainListMock run:self.productBargainListParam];
}

-(void)getCheckOutFixListWithPage:(int)pageNo block:(ManagerReturnBlock)returnBlock{
    self.productBargainFixParam.p_type = @"all";
    self.productBargainFixParam.limit = [NSString stringWithFormat:@"%d",kListPageSize];
    self.productBargainFixParam.start_id = [NSString stringWithFormat:@"%d",pageNo];
    self.productBargainFixMock.returnBlock =^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    
    [self.productBargainFixMock run:self.productBargainFixParam];
}


-(void)getBuyingListInformationWithStartId:(NSString *)startId Block:(ManagerReturnBlock)returnBlock
{
    self.buyingListParam.start_id = startId;
    self.buyingListParam.limit = @"10";
    
    self.buyingListMock.returnBlock = ^(QUNetAdaptor *adaptor, QUNetResponse *response, QUMock *mock){
      
        if (returnBlock != nil) {
            
            returnBlock([BaseManager convertResult:adaptor response:response], mock, response.pEntity);
        }
    };
    
    [self.buyingListMock run:self.buyingListParam];
}

-(void)getTodoListInformationWithStartId:(NSString *)startId Block:(ManagerReturnBlock)returnBlock
{
    self.todoListParam.start_id = startId;
    self.buyingListParam.limit = @"10";
    
    self.buyingListMock.returnBlock = ^(QUNetAdaptor *adaptor, QUNetResponse *response, QUMock *mock){
      
        if (returnBlock != nil) {
            
            returnBlock([BaseManager convertResult:adaptor response:response], mock, response.pEntity);
        }
        
    };
    
    [self.todoListMock run:self.todoListParam];
}

-(void)getSellingListInformationWithStartId:(NSString *)startId Block:(ManagerReturnBlock)returnBlock
{
    self.sellingListParam.start_id = startId;
    self.sellingListParam.limit = @"10";
    
    self.sellingListMock.returnBlock = ^(QUNetAdaptor *adaptor, QUNetResponse *response, QUMock *mock){
        
        if (returnBlock != nil) {
            
            returnBlock([BaseManager convertResult:adaptor response:response], mock, response.pEntity);
        }
    };
    
    [self.sellingListMock run:self.sellingListParam];
}


/*账单列表数据*/
-(void)getCheckListWithStartId:(NSString *)startId Block:(ManagerReturnBlock)returnBlock{

    self.settlementsParam.start_id = startId;
    self.settlementsParam.limit = @"3";
    self.settlementsMock.returnBlock = ^(QUNetAdaptor *adaptor, QUNetResponse *response, QUMock *mock){
        
        if (returnBlock != nil) {
            
            returnBlock([BaseManager convertResult:adaptor response:response], mock, response.pEntity);
        }
        
    };
    [self.settlementsMock run:self.settlementsParam];
}

/*账单列表支付*/
-(void)goPayWithp_id:(NSString *)p_id Block:(ManagerReturnBlock)returnBlock{

    self.doSettleParam.p_id = p_id;
    self.doSettleMock.returnBlock = ^(QUNetAdaptor *adaptor, QUNetResponse *response, QUMock *mock){
        
        if (returnBlock != nil) {
            
            returnBlock([BaseManager convertResult:adaptor response:response], mock, response.pEntity);
        }
        
    };
    [self.doSettleMock run:self.doSettleParam];
}

/*异议申请*/
-(void)declareBargainWithReason:(NSString*)reason
                          price:(NSString*)price
                          point:(NSString*)point
                            pid:(NSString*)pid
                           type:(NSString*)ptype
                          block:(ManagerReturnBlock)returnBlock{
    self.declareParam.p_type =  ptype;
    self.declareParam.reason = [reason stringByReplacingOccurrencesOfString:@"\n" withString:@"\\n"];
    self.declareParam.price = price;
    self.declareParam.point = point;
    self.declareParam.p_id = pid;
    
    self.declareMock.returnBlock =^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.declareMock run:self.declareParam];
}


/*账单详细*/
-(void)getCheckDetailWithP_id:(NSString *)p_id AndP_type:(NSString *)p_type Block:(ManagerReturnBlock)returnBlock{

    self.detailParam.p_id = p_id;
    self.detailParam.p_type = p_type;
    self.detailMock.returnBlock =^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.detailMock run:self.detailParam];
}


/*流水账单*/
-(void)getDealHistoryWithP_id:(NSString *)p_id AndType:(NSString *)type Block:(ManagerReturnBlock)returnBlock{

    self.dealHistoryParam.p_id = p_id;
    self.dealHistoryParam.type = type;
    self.dealHistoryMock.returnBlock =^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.dealHistoryMock run:self.dealHistoryParam];
}

<<<<<<< .mine
-(void)refreshProfitByIds:(NSArray*)id_arr andBlock:(ManagerReturnBlock)returnBlock{
    
    _profitParam.p_id_arr = @"";
    for (NSString *ID in id_arr) {
        _profitParam.p_id_arr = [NSString stringWithFormat:@"%@%@,",_profitParam.p_id_arr,ID];
    }
    
    
    _profitMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,QUMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [_profitMock run:_profitParam ignoreError:YES];
}

-(void)getDetailWithP_id:(NSString *)p_id WithP_type:(NSString *)p_type block:(ManagerReturnBlock)returnBlock{
    
    self.detailParam.p_id = p_id;
    self.detailParam.p_type = p_type;
    
    self.detailMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,QUMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.detailMock run:self.detailParam];
    
}

-(void)sellOrderWithId:(NSString *)p_id andAmount:(NSString *)amount andPrice:(NSString *)price block:(ManagerReturnBlock)returnBlock{
    self.sellOrderParam = [SellOrderParam param];
    self.sellOrderParam.p_id = p_id;
    self.sellOrderParam.stock_amount = amount;
    self.sellOrderParam.start_price = price;
    self.sellOrderParam.sell_way = @"1";
    self.sellOrderMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,QUMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    self.sellOrderMock.filterErrorCodes = @[@AFNETWORKING_ERROR_CODE];
    [self.sellOrderMock run:self.sellOrderParam];
}

=======
-(void)refreshProfitByIds:(NSArray*)id_arr andBlock:(ManagerReturnBlock)returnBlock{
    
    _profitParam.p_id_arr = @"";
    for (NSString *ID in id_arr) {
        _profitParam.p_id_arr = [NSString stringWithFormat:@"%@%@,",_profitParam.p_id_arr,ID];
    }
    
    
    _profitMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,QUMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [_profitMock run:_profitParam ignoreError:YES];
}



/*可选策略列表*/
-(void)getPolicyListByCode:(NSString *)stock_code
                   startID:(NSString *)start_id
                     limit:(NSString *)limit
                     block:(ManagerReturnBlock)returnBlock{
    self.policyListParam.stock_code = stock_code;
    self.policyListParam.start_id=start_id;
    self.policyListParam.limit=limit;
    
    self.policyListMock.returnBlock =^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.policyListMock run:self.policyListParam];
}


/**方案查询**/
-(void)getSchemeDetailBySchemeID:(NSString *)scheme_id Block:(ManagerReturnBlock)returnBlock{
    self.schemeDetailParam.scheme_id = scheme_id;
    self.schemeDetailMock.returnBlock =^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.schemeDetailMock run:self.schemeDetailParam];
}

/**提前校验接口**/
-(void)preSimpleCheckByStockCode:(NSString *)stock_code Block:(ManagerReturnBlock)returnBlock{
    self.preSimpleCheckParam.stock_code = stock_code;
    self.preSimpleCheckMock.returnBlock =^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.preSimpleCheckMock run:self.preSimpleCheckParam];
}


/**确认买前统一校验**/
-(void)prePolicyCheckBySchemeID:(NSString *)scheme_id
                    investor_id:(NSString *)investor_id
                     stock_Code:(NSString *)stock_code
                           fund:(NSString *)fund
                        cell_id:(NSString *)cell_id
                          Block:(ManagerReturnBlock)returnBlock{
    self.prePolicyCheckParam.scheme_id = scheme_id;
    self.prePolicyCheckParam.investor_id=investor_id;
    self.prePolicyCheckParam.stock_code=stock_code;
    self.prePolicyCheckParam.fund=fund;
    self.prePolicyCheckParam.cell_id=cell_id;
    self.prePolicyCheckMock.returnBlock =^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.prePolicyCheckMock run:self.prePolicyCheckParam];
}


/**确认发布策略**/
-(void)createPolicyBySchemeID:(NSString *)scheme_id
                  investor_id:(NSString *)investor_id
                   stock_Code:(NSString *)stock_code
                         fund:(NSString *)fund
                      cell_id:(NSString *)cell_id
                        Block:(ManagerReturnBlock)returnBlock{
    self.createPolicyParam.scheme_id = scheme_id;
    self.createPolicyParam.investor_id=investor_id;
    self.createPolicyParam.stock_code=stock_code;
    self.createPolicyParam.fund=fund;
    self.createPolicyParam.cell_id=cell_id;
    self.createPolicyMock.returnBlock =^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.createPolicyMock run:self.createPolicyParam];
}
>>>>>>> .r3165
@end











