//
//  UserInfoManager.m
//  QianFangGuJie
//
//  Created by chenyi on 15/5/20.
//  Copyright (c) 2015年 JYZD. All rights reserved.
//

#import "UserInfoManager.h"
#import "NetResultCode.h"

#import "CustomerServiceEntity.h"
#import "SetMoblieAndPasswordEntity.h"


@interface UserInfoManager()
//@property(strong,nonatomic)NSString* userid;
//@property(strong,nonatomic)NSString* userphonenumber;
//@property(strong,nonatomic)NSString* usernickname;
//@property(strong,nonatomic)NSString* userlogo;
@property(strong,nonatomic)NSString* sessionid;
@property(strong,nonatomic)UIImage* headimg;
@end;

@implementation UserInfoManager
static UserInfoManager *_singleAccount = nil;

+ (UserInfoManager *)shareUserInfoManager
{
    if (_singleAccount == nil) {
        _singleAccount = [[self alloc]init];
        [_singleAccount initMock];
        _singleAccount.myEntity = [UserInfoEntity entity];
        NSUserDefaults* userInfo = [NSUserDefaults standardUserDefaults];
        _singleAccount.myEntity.bind_mobile = [userInfo valueForKey:kUserPhoneNumber];
        _singleAccount.myEntity.pic = [[NSUserDefaults standardUserDefaults]valueForKey:kUserLogo];
        _singleAccount.myEntity.uid = [[NSUserDefaults standardUserDefaults]valueForKey:kUserId];
        _singleAccount.myEntity.nick_name=[[NSUserDefaults standardUserDefaults]valueForKey:kUserNickName];
        _singleAccount.sessionid=[[NSUserDefaults standardUserDefaults]valueForKey:kUserSessionid];
//        _singleAccount.isBigConfirmOpen = YES;
    }
    return _singleAccount;
}

+ (id)allocWithZone:(struct _NSZone *)zone
{
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _singleAccount = [super allocWithZone:zone];
    });
    return _singleAccount;
}

-(void)initMock{
    self.myPicMock = [checkPicMock mock];
    self.myCheckPicParam = [checkPicParam param];
    
    self.myLoginMock = [LoginMock mock] ;           //登陆mock
    self.myLoginParam = [LoginParam param];
    
    self.myUserInfoMock=[UserInfoMock mock]; //获取用户信息mock
    self.myUserInfoParam=[UserInfoParam param];
    
    self.myNoticeMock=[noticeMock mock];   //站内信预处理mock
    self.myNoticeParam=[noticeParam param];
    
    //  self.myCodeMock=[UidMobileCodeCheckMock mock];           //手机验证码mock
    //  self.myCodeParam=[UidMobileCodeCheckParam param];
    
    self.myCodeMock=[SendUidMobileCodeMock mock];
    self.myCodeParam = [SendUidMobileCodeParam param];
    
    self.mySetPasswordMock=[SetPasswordMock mock];           //设置密码mock
    self.mySetPasswordParam=[SetPasswordParam param];
    
    self.nickMock = [NickNameMock mock];
    self.nickParam = [NickNameParam param];
    
    self.myUidMobileCodeCheckMock = [UidMobileCodeCheckMock mock];
    self.myUidMobileCodeCheckParam = [UidMobileCodeCheckParam param];
    
    
    self.productListMock=[ProductListMock mock];
    self.productListParam=[ProductListParam param];

    self.cpbMock = [CPBAmountMock mock];
    self.cpbParam = [CPBAmountParam param];
    
    self.customerServiceMock=[CustomerServiceMock mock];
    self.customerServiceParam=[CustomerServiceParam param];
    
    self.limitMock = [QuotaGetMock mock];
    self.limitParam = [QuotaGetParam param];

    
    self.loginbyssoMock = [LoginbyssoMock mock];
    self.loginbyssoParam = [LoginbyssoParam param];
    
    self.sendNewMobileCodeMock = [SendNewMobileCodeMock mock];
    self.sendNewMobileCodeParam = [SendNewMobileCodeParam param];
    
    self.setMoblieAndPasswordParam = [SetMoblieAndPasswordParam param];
    self.setMoblieAndPasswordMock = [SetMoblieAndPasswordMock mock];
    
    self.sendMobileCodeForauthMock = [SendMobileCodeForauthMock mock];
    self.sendMobileCodeForauthParam = [SendMobileCodeForauthParam param];
    
    self.checkMobileCodeMock = [CheckMobileCodeMock mock];
    self.checkMobileCodeParam = [CheckMobileCodeParam param];
    
    self.bindNewMobileMock = [BindNewMobileMock mock];
    self.bindNewMobileParam = [BindNewMobileParam param];
    
    self.sendUidMobileCodeMock = [SendUidMobileCodeMock mock];
    self.sendUidMobileCodeParam = [SendUidMobileCodeParam param];
    
    self.uidMobileCodeCheckMock = [UidMobileCodeCheckMock mock];
    self.uidMobileCodeCheckParam = [UidMobileCodeCheckParam param];
    
    self.nickNameMock = [SetNickNameMock mock];
    self.nickNameParam = [SetNickNameParam param];
}

/** 获取验证码 **/
-(void)getCheckPicWithUUID:(NSString*)uid IdentifyCode:(NSString*)code ReturnBlock:(ManagerReturnBlock) returnBlock{
    self.myCheckPicParam.UUID = uid;
    self.myCheckPicParam.code = code;
    kMockReturn(myPicMock,myCheckPicParam);
}

/** 登陆 **/
-(void)loginWithLoginID:(NSString*)loginID Password:(NSString*)password LogInType:(NSString*)logInType ReturnBlock:(ManagerReturnBlock) returnBlock{
    self.myLoginParam.login_id =loginID;
    self.myLoginParam.password = password;
    self.myLoginParam.login_type = logInType;
     DEFINED_WEAK_SELF
    self.myLoginMock.returnBlock =^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        LoginEntity* e = (LoginEntity*)response.pEntity;
        if([e.error_code isEqualToString:code2str(NET_SUCCESS_CODE)])
        {
            [[NSUserDefaults standardUserDefaults]setValue:e.uid forKey:kUserId];
            [[NSUserDefaults standardUserDefaults]setValue:e.session_id forKey:kUserSessionid];
            [[NSUserDefaults standardUserDefaults]setValue:e.encryptedKey forKey:kEncryptedKey];
            _self.myEntity.uid = e.uid;
            _self.sessionid = e.session_id;
        }
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.myLoginMock run:self.myLoginParam];
}


/** 登陆 **/
-(void)loginWithToken:(NSString*)token ReturnBlock:(ManagerReturnBlock) returnBlock{
    self.loginbyssoParam.token = token;
    DEFINED_WEAK_SELF
    self.loginbyssoMock.returnBlock =^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        LoginEntity* e = (LoginEntity*)response.pEntity;
        if([e.error_code isEqualToString:code2str(NET_SUCCESS_CODE)])
        {
            [[NSUserDefaults standardUserDefaults]setValue:e.uid forKey:kUserId];
            [[NSUserDefaults standardUserDefaults]setValue:e.session_id forKey:kUserSessionid];
            [[NSUserDefaults standardUserDefaults]setValue:e.encryptedKey forKey:kEncryptedKey];
            _self.myEntity.uid = e.uid;
            _self.sessionid = e.session_id;
        }
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.loginbyssoMock run:self.loginbyssoParam];
}

/** 获取用户信息 **/
-(void)getUserInfoWithUid:(NSString*)uid returnBlock:(ManagerReturnBlock) returnBlock{
    self.myUserInfoParam.uid = uid;

    self.myUserInfoMock.returnBlock =^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){

        if ([response.pEntity isKindOfClass:[UserInfoEntity class]]) {
            UserInfoEntity *e = (UserInfoEntity*)response.pEntity;
            [[UserInfoManager shareUserInfoManager] saveUserInfo:(UserInfoEntity*)e];
        }
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.myUserInfoMock run:self.myUserInfoParam];
}

/** 获取站内信预处理 **/
-(void)getNoticeWithSendMethod:(NSString*)sendMethod UserType:(NSString*)userType returnBlock:(ManagerReturnBlock) returnBlock{
    self.myNoticeParam.sendMethod =sendMethod;
    self.myNoticeParam.user_type = userType;
    kMockReturn(myNoticeMock,myNoticeParam);
}


/** 获取专属客服信息 **/
-(void)getCustomerServiceInfoWithReturnBlock:(ManagerReturnBlock) returnBlock{
    
    kMockReturn(customerServiceMock,customerServiceParam);
    //[self.customerServiceMock run:self.customerServiceParam];
}


#pragma mark - 判断是否已登录
+(BOOL)hasLogin{
    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
    id obj= [userDefaults objectForKey:kUserId];
    if (obj!=nil && !kShareAppDelegate.isFirst) {
        return YES;
    }
    return NO;
    
}

#pragma mark - 判断是否登录过
+(BOOL)hasLogined{
    NSUserDefaults* userDefaults = [NSUserDefaults standardUserDefaults];
    id obj= [userDefaults objectForKey:kUserPhoneNumber];
    if (obj!=nil) {
        return YES;
    }
    return NO;
}

#pragma mark 站内信预处理及获取用户信息
-(void)LoginSuccessShowWithReturnBlock:(ManagerReturnBlock) returnBlock{
    [self noticePreProcessWithReturnBlock:nil];
    [self getUserInfoWithReturnBlock:returnBlock];   //走获取用户信息
}
#pragma mark - 从网络获取用户信息
-(void)getUserInfoWithReturnBlock:(ManagerReturnBlock) returnBlock{
    [self getUserInfoWithUid:[[NSUserDefaults standardUserDefaults]valueForKey:kUserId]
                                 returnBlock:returnBlock];
}

-(void)noticePreProcessWithReturnBlock:(ManagerReturnBlock) returnBlock{
//    DEFINED_WEAK_SELF
    [self getNoticeWithSendMethod:@"GET" UserType:@"1"
                                      returnBlock:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
                                          noticeEntity* e = (noticeEntity*)entity;
                                          if ([e.result isEqualToString:@"Y"]) {
//                                              [_self getUserInfoWithReturnBlock:returnBlock];   //走获取用户信息
                                          }
                                      }];
}

#pragma mark - 保存用户信息到本地
-(void)saveUserInfo : (UserInfoEntity*)entity{
    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
    [userDefaults setObject:entity.nick_name forKey:kUserNickName];
    [userDefaults setObject:entity.pic forKey:kUserLogo];
    [userDefaults setObject:entity.uid forKey:kUserId];
//    if(self.myLoginParam.logInID!=nil&&![self.myLoginParam.logInID isEqualToString:@""]){
//        [userDefaults setObject:self.myLoginParam.logInID forKey:kUserPhoneNumber];
//    }
    if(entity.bind_mobile!=nil&&![entity.bind_mobile isEqualToString:@""]){
        [userDefaults setObject:entity.bind_mobile forKey:kUserPhoneNumber];
    }
    [userDefaults synchronize];
    
    self.myEntity = entity;
    self.myEntity.bind_mobile = [userDefaults objectForKey:kUserPhoneNumber];

}



#pragma mark - 获取用户信息
-(NSString*)getEncryptedKey{
    NSUserDefaults* userDefaults = [NSUserDefaults standardUserDefaults];
    NSString* string = [userDefaults objectForKey:kEncryptedKey];
    return string?string:@"";
}

-(NSString*)getUserPhonenumber{
    if(self.myEntity.bind_mobile ||[self.myEntity.bind_mobile integerValue]==0 ){
    NSUserDefaults* userDefaults = [NSUserDefaults standardUserDefaults];
    self.myEntity.bind_mobile = [userDefaults objectForKey:kUserPhoneNumber];
    }
    return self.myEntity.bind_mobile;
}
-(NSString*)getUserNickName{
    return self.myEntity.nick_name;
}
-(NSString*)getUserNickNameStatus{
    return self.myEntity.nicknm_status;
}
-(NSString*)getUserLogo{
    return self.myEntity.pic;
}
-(NSString*)getUserID{
    return self.myEntity.uid;
}
-(NSString*)getSessionID{
    return self.sessionid;
}
-(void)getHeadImg:(UIImageView*)imgView{
    NSUserDefaults * ud= [NSUserDefaults standardUserDefaults];
    NSString *headurl = [ud objectForKey:kUserHeadUrl];
    NSData *data= [ud objectForKey:kUserHeadImg];
    DEFINED_WEAK_SELF
    if (self.headimg) {
         imgView.image =self.headimg;
    }else if([self.myEntity.pic isEqualToString:headurl] && data){
        self.headimg = [UIImage imageWithData:data];
        imgView.image = self.headimg;
    }else if (self.myEntity.pic){
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            NSData* data  = [NSData dataWithContentsOfURL:[NSURL URLWithString:self.myEntity.pic]];
            dispatch_sync(dispatch_get_main_queue(), ^{
                if (data) {
                    _self.headimg = [UIImage imageWithData:data];
                    imgView.image = _self.headimg;
                    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
                    [userDefaults setObject:_self.myEntity.pic forKey:kUserHeadUrl];
                    [userDefaults setObject:data forKey:kUserHeadImg];
                    
                    [userDefaults synchronize];
                }
            });
        });
    }
}
-(void)getHeadImgForBtn:(UIButton*)btn{
    NSUserDefaults * ud= [NSUserDefaults standardUserDefaults];
    NSString *headurl = [ud objectForKey:kUserHeadUrl];
    NSData *data= [ud objectForKey:kUserHeadImg];
    DEFINED_WEAK_SELF
    if (self.headimg) {
        [btn setBackgroundImage:self.headimg forState:UIControlStateNormal];
    }else if([self.myEntity.pic isEqualToString:headurl] && data){
        self.headimg = [UIImage imageWithData:data];
        [btn setBackgroundImage:self.headimg forState:UIControlStateNormal];
    }else if (self.myEntity.pic){
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            NSData* data  = [NSData dataWithContentsOfURL:[NSURL URLWithString:self.myEntity.pic]];
            dispatch_sync(dispatch_get_main_queue(), ^{
                if (data) {
                    _self.headimg = [UIImage imageWithData:data];
                    [btn setBackgroundImage:_self.headimg forState:UIControlStateNormal];
                    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
                    [userDefaults setObject:_self.myEntity.pic forKey:kUserHeadUrl];
                    [userDefaults setObject:data forKey:kUserHeadImg];
                    [userDefaults synchronize];
                }
            });
        });
    }

}

/** 注销用户 **/
-(void)removeUser{
    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
    [userDefaults removeObjectForKey:kUserPhoneNumber];
    [userDefaults removeObjectForKey:kUserId];
    [userDefaults removeObjectForKey:kUserLogo];
    [userDefaults removeObjectForKey:kUserNickName];
    [userDefaults removeObjectForKey:kUserSessionid];
    self.sessionid = nil;
    self.myEntity = [UserInfoEntity entity];
    self.headimg = nil;
    [userDefaults synchronize];
    //清除消息推送
    UIApplication * app = [UIApplication sharedApplication];
    app.applicationIconBadgeNumber = 0;
    self.cpbEntity = nil;
    self.myQuotaDictionary = nil;
    self.limitEntity = nil;
    [[NSNotificationCenter defaultCenter] postNotificationName:kExitSuccessed object:nil];
}

/** 获取手机验证码 **/
-(void)getMobileCodeWithMobile:(NSString*)mobile Code:(NSString*)code UUID:(NSString*)uuid returnBlock:(ManagerReturnBlock) returnBlock{
    self.myCodeParam.mobile = mobile;
    self.myCodeParam.code = code;
    self.myCodeParam.UUID = uuid;
    kMockReturn(myCodeMock,myCodeParam);
    
}

/** 获取手机验证码 **/
-(void)getMobileCodeWithMobile:(NSString*)mobile UUID:(NSString*)uuid returnBlock:(ManagerReturnBlock) returnBlock{
    self.sendUidMobileCodeParam.mobile = mobile;
    self.sendUidMobileCodeParam.UUID = uuid;
    kMockReturn(sendUidMobileCodeMock,sendUidMobileCodeParam);
    
}
/** 重置获取手机验证码 **/
-(void)getMobileCodeWithMobile:(NSString*)mobile returnBlock:(ManagerReturnBlock) returnBlock{

    self.sendUidMobileCodeParam.mobile = mobile;
    self.sendUidMobileCodeMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.sendUidMobileCodeMock run:self.sendUidMobileCodeParam];
   
}

/** 检验手机验证码 **/
-(void)checkMobileCodeWithMobile:(NSString*)mobile Code:(NSString*)code returnBlock:(ManagerReturnBlock) returnBlock{
    self.myUidMobileCodeCheckParam.mobile = mobile;
    self.myUidMobileCodeCheckParam.code = code;
    kMockReturn(myUidMobileCodeCheckMock,myUidMobileCodeCheckParam);
}

/** 检验手机验证码 **/
-(void)checkUidMobileCodeWithMobile:(NSString*)mobile Code:(NSString*)code returnBlock:(ManagerReturnBlock) returnBlock{
    self.uidMobileCodeCheckParam.mobile = mobile;
    self.uidMobileCodeCheckParam.code = code;
    kMockReturn(uidMobileCodeCheckMock,uidMobileCodeCheckParam);
}

/** 保存昵称 **/
-(void)saveNickName:(NSString*)nickname returnBlock:(ManagerReturnBlock) returnBlock{
    self.nickParam.nickname = nickname;
    kMockReturn(nickMock,nickParam);
}

#pragma mark - 设置用户信息
-(void)setUserPhonenumber:(NSString*)phonenumber{
    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
    [userDefaults setObject:phonenumber forKey:kUserPhoneNumber];
    [userDefaults synchronize];
//    self.userphonenumber = phonenumber;
    self.myEntity.bind_mobile = phonenumber;
}

-(void)setHeadImg:(UIImage*)img{
    self.headimg=img;
}

/** 移除sessionid **/
-(void)removeSessionid{
    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
    [userDefaults removeObjectForKey:kUserSessionid];
    self.sessionid = nil;
    [userDefaults synchronize];
}


-(void)getProductListWithBlock:(ManagerReturnBlock) returnBlock{
    self.productListParam.sendMethod=@"GET";
    //kMockReturn(productListMock, productListParam);
    self.productListMock.returnBlock=^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.productListMock run:self.productListParam];
}


-(void)refreshCpb:(ManagerReturnBlock)returnBlock{
    DEFINED_WEAK_SELF
    self.cpbMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        CPBAmountEntity *entity = (CPBAmountEntity*)response.pEntity;
        if (entity) {
            _self.cpbEntity = entity;
        }
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.cpbMock run:self.cpbParam];
}

/** 获取风险等级 **/
-(void)refreshLimitWithType:(NSString*)ptype andBlock:(ManagerReturnBlock) returnBlock{
    DEFINED_WEAK_SELF
    self.limitParam.p_type = ptype;
    self.limitMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if ([response.pEntity isKindOfClass:[QuotaGetEntity class]]) {
            _self.limitEntity = (QuotaGetEntity*)response.pEntity;
        }
        
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.limitMock run:self.limitParam];
}


-(void)getVerifyCode4BindWithPhonenum:(NSString*)phoneNum andBlock:(ManagerReturnBlock) returnBlock{
    self.sendNewMobileCodeParam.mobile = phoneNum;
    self.sendNewMobileCodeMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.sendNewMobileCodeMock run:self.sendNewMobileCodeParam];
}

//-(void)bindUserWithPhonenum:(NSString *)phoneNum pwd:(NSString *)pwd nickName:(NSString *)nickName withVerifyCode:(NSString *)verifyCode andBlock:(ManagerReturnBlock)returnBlock{
//    self.setMoblieAndPasswordParam.mobile = phoneNum;
//    self.setMoblieAndPasswordParam.nickname = nickName;
//    self.setMoblieAndPasswordParam.password = pwd;
//    self.setMoblieAndPasswordParam.mobile_code = verifyCode;
//    DEFINED_WEAK_SELF
//    self.setMoblieAndPasswordMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
//        if (response.pReason == QU_SERVICE_BACK_OK && response.pEntity){
//            [_self getUserInfoWithReturnBlock:nil];
//        }
//        if(returnBlock!=nil){
//            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
//        }
//    };
//    [self.setMoblieAndPasswordMock run:self.setMoblieAndPasswordParam];
//}

-(void)bindUserWithPhonenum:(NSString *)phoneNum pwd:(NSString *)pwd WithVerifyCode:(NSString *)verifyCode andBlock:(ManagerReturnBlock)returnBlock
{
    DEFINED_WEAK_SELF
    self.setMoblieAndPasswordParam.mobile = phoneNum;
    self.setMoblieAndPasswordParam.password = pwd;
    self.setMoblieAndPasswordParam.mobile_code = verifyCode;
    
    self.setMoblieAndPasswordMock.returnBlock = ^(QUNetAdaptor *adaptor, QUNetResponse *response, AppMock *mock){
      
        if (response.pReason == QU_SERVICE_BACK_OK && response.pEntity) {
            
            [_self getUserInfoWithReturnBlock:nil];
        }
        
        if (returnBlock != nil) {
            
            returnBlock([BaseManager convertResult:adaptor response:response], mock, response.pEntity);
        }
    };
    [self.setMoblieAndPasswordMock run:self.setMoblieAndPasswordParam];
}

-(void)bindUserWithNickName:(NSString *)nickName Block:(ManagerReturnBlock)returnBlock
{
    DEFINED_WEAK_SELF
    self.nickNameParam.nickname = nickName;
    
    self.nickNameMock.returnBlock = ^(QUNetAdaptor *adaptor, QUNetResponse *response, AppMock *mock){
      
        if (response.pReason == QU_SERVICE_BACK_OK && response.pEntity) {
            
            [_self getUserInfoWithReturnBlock:nil];
        }
        
        if (returnBlock != nil) {
            
            returnBlock([BaseManager convertResult:adaptor response:response], mock, response.pEntity);
        }
    };
    [self.nickNameMock run:self.nickNameParam];
}

/*向原手机发送验证码（重绑手机号）*/
-(void)getOldMobileCodeReturnBlock:(ManagerReturnBlock) returnBlock{

    self.sendMobileCodeForauthMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };

    [self.sendMobileCodeForauthMock run:self.sendMobileCodeForauthParam];
}


/*原手机验证码校验（重绑手机号）*/
-(void)checkOldMobileCodeWithMobile_Code:(NSString *)mobile_code returnBlock:(ManagerReturnBlock) returnBlock{

    self.checkMobileCodeParam.mobile_code = mobile_code;
    self.checkMobileCodeMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    
    [self.checkMobileCodeMock run:self.checkMobileCodeParam];

}

/*验证验证码绑定新手机*/
-(void)checkNewMobileCodeWithMobile:(NSString *)mobile mobile_Code:(NSString *)mobile_code returnBlock:(ManagerReturnBlock) returnBlock{
    
    self.bindNewMobileParam.mobile = mobile;
    self.bindNewMobileParam.mobile_code = mobile_code;
    self.bindNewMobileMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    
    [self.bindNewMobileMock run:self.bindNewMobileParam];


}
@end