//
//  ConfigManager.m
//  QianFangGuJie
//
//  Created by  rjt on 15/10/8.
//  Copyright © 2015年 JYZD. All rights reserved.
//

#import "ConfigManager.h"
#import "CfgMock.h"
#import "HotfixMock.h"
#import "updateTradeDataEntity.h"
#import "JPEngine.h"
#import "AFNetworking/AFNetworking.h"
#import "NSString+MD5.h"
#import <CommonCrypto/CommonDigest.h>

#define FileHashDefaultChunkSizeForReadingData 1024*8 // 8K

@interface  ConfigManager()<UIAlertViewDelegate>
@property (nonatomic,strong) HotfixMock *hotMock;
@end

@implementation ConfigManager
single_implementation(ConfigManager);

-(instancetype)init{
    if (self = [super init]) {
        _h5Url	=	H5_URL	;
        _serverUrlUser	=	SERVER_URL_USER	;
        _serverUrlProd	=	SERVER_URL_PROD	;
        _cpbLoginUrl = CPB_LOGIN_URL;
        _cpbRegUrl = CPB_REG_URL;
        _customerServiceAddress	=	CUSTOMER_SERVICE_ADDRESS	;
        _hqUrlDay	=	HQ_URL_DAY	;
        _hqUrlNight	=	HQ_URL_NIGHT	;
        _cfgVersion =   @"1.0";
        _cfgMock = [CfgMock mock];
        _hotMock = [HotfixMock mock];
        
        [self updateCfg];
    }
    return self;
}

-(void)updateCfg{
    NSUserDefaults *def = [NSUserDefaults standardUserDefaults];
    NSString *json = [def objectForKey:kConfig];
    NSString *cfgVersion = [def objectForKey:kConfigVersion];
    if (json && [cfgVersion isEqualToString:VERSION]) {
        CfgEntity *entity =[[[QUJsonParse alloc] init] objFromString:json withClass:[CfgEntity class] withMetmod:nil];
        NSMutableDictionary *dict = entity.res_data;
        NSEnumerator *eunm = [dict keyEnumerator];
        for (NSString* key in eunm) {
            @try {
                [self setValue:[dict objectForKey:key] forKey:key];
            }
            @catch (NSException *exception) {
                
            }
        }
    }
    
    DEFINED_WEAK_SELF
    CfgParam* param = [CfgParam param];
    param.ini_version = _cfgVersion;
    _cfgMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if([response.pEntity isKindOfClass:[CfgEntity class]]){
            CfgEntity* cfgEntity = (CfgEntity*)response.pEntity;
            if ([cfgEntity.result isEqualToString:@"Y"] && [cfgEntity.is_update isEqualToString:@"Y"]) {
                NSUserDefaults *def = [NSUserDefaults standardUserDefaults];
                [def setObject:response.pJsonBody forKey:kConfig];
                [def setObject:VERSION forKey:kConfigVersion];
                NSMutableDictionary *dict = cfgEntity.res_data;
                NSEnumerator *eunm = [dict keyEnumerator];
                for (NSString* key in eunm) {
                    @try {
                        [_self setValue:[dict objectForKey:key] forKey:key];
                    }
                    @catch (NSException *exception) {
                        
                    }
                }
            }
        }
    };
    [_cfgMock run:param ignoreError:YES];
}

-(void)checkHotfix{
    HotfixParam *hotParam = [HotfixParam param];
    DEFINED_WEAK_SELF
    _hotMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,AppMock *mock){
        if([response.pEntity isKindOfClass:[updateTradeDataEntity class]]){
            updateTradeDataEntity* entity = (updateTradeDataEntity*)response.pEntity;
            if (entity.res_data) {
                updateTradeDataRes_dataEntity* newEntity = (updateTradeDataRes_dataEntity*)entity.res_data;
                //比对
                NSUserDefaults *ud = [NSUserDefaults standardUserDefaults];
                ;
                NSData *data = [ud objectForKey:kHotFixKey];
                updateTradeDataRes_dataEntity *oldEntity = [NSKeyedUnarchiver unarchiveObjectWithData:data];
                if (newEntity.url) {
                    if (oldEntity && [oldEntity isKindOfClass:[updateTradeDataRes_dataEntity class]]) {
                        //获取版本号
                        if (![newEntity.version isEqualToString:oldEntity.version]
                            || ![newEntity.ios_hotfix isEqualToString:oldEntity.ios_hotfix]) {
                            [_self downloadByEntity:newEntity];
                        }
                    }else{
                        [_self downloadByEntity:newEntity];
                    }
                }
            }
        }
    };
    [_hotMock run:hotParam ignoreError:YES];
}

-(void)runHotfix{
    NSString* js = [NSString stringWithContentsOfURL:[self getHotfixURL] encoding:NSUTF8StringEncoding error:nil];
    NSUserDefaults *user = [NSUserDefaults standardUserDefaults];
    updateTradeDataRes_dataEntity *entity = [NSKeyedUnarchiver unarchiveObjectWithData:[user objectForKey:kHotFixKey]];
    if (js.length > 0 && entity && [entity isKindOfClass:[updateTradeDataRes_dataEntity class]] && [entity.ios_version isEqualToString:VERSION]) {
        if ([[js md5For16] isEqualToString:entity.ios_hotfix]) {
            [JPEngine startEngine];
            [JPEngine evaluateScript:js];
        }else{
            [user setObject:nil forKey:kHotFixKey];
            [user synchronize];
        }
    }else
    {
        [user setObject:nil forKey:kHotFixKey];
        [user synchronize];
    }
}

-(void)testRunHotfix{
    NSString * path = [[NSBundle mainBundle] pathForResource: @"hotfix" ofType: @"js"];
    NSString* js = [NSString stringWithContentsOfFile:path encoding:(NSUTF8StringEncoding) error:nil];
    if (js.length > 0) {
        NSLog(@"md5For16 = %@",[js md5For16]);
        [JPEngine startEngine];
        [JPEngine evaluateScript:js];
    }else
    {

    }
    
}


-(void)downloadByEntity:(updateTradeDataRes_dataEntity*)entity{
    if (entity) {
        NSURLSessionConfiguration *configuration = [NSURLSessionConfiguration defaultSessionConfiguration];
        AFURLSessionManager *manager = [[AFURLSessionManager alloc] initWithSessionConfiguration:configuration];
        
        [manager setDownloadTaskDidFinishDownloadingBlock:^NSURL * _Nullable(NSURLSession * _Nonnull session, NSURLSessionDownloadTask * _Nonnull downloadTask, NSURL * _Nonnull location) {
            //NSLog(@"getHotfixURL = %@",[self getHotfixURL]);
            
            //删除原来文件
            NSFileManager * fileManager = [[NSFileManager alloc]init];
            [fileManager removeItemAtURL:[self getHotfixURL] error:nil];
            
            return [self getHotfixURL];
        }];
        
        NSURL *URL = [NSURL URLWithString:entity.url];
        NSURLRequest *request = [NSURLRequest requestWithURL:URL];
        
        
        NSURLSessionDownloadTask *downloadTask = [manager downloadTaskWithRequest:request progress:nil destination:^NSURL *(NSURL *targetPath, NSURLResponse *response) {
            NSURL *documentsDirectoryURL = [[NSFileManager defaultManager] URLForDirectory:NSDocumentDirectory inDomain:NSUserDomainMask appropriateForURL:nil create:NO error:nil];
            return [documentsDirectoryURL URLByAppendingPathComponent:[response suggestedFilename]];
        } completionHandler:^(NSURLResponse *response, NSURL *filePath, NSError *error) {
            NSLog(@"File downloaded to: %@", filePath);

            //保存文件
            entity.ios_version = VERSION;
            NSData *data = [NSKeyedArchiver archivedDataWithRootObject:entity];
            NSUserDefaults *user = [NSUserDefaults standardUserDefaults];
            [user setObject:data forKey:kHotFixKey];
            [user synchronize];
            [[NSNotificationCenter defaultCenter] postNotificationName:kHotFixDownCompKey object:nil];
        }];
        [downloadTask resume];
    }
}

-(NSURL*)getHotfixURL{
    NSString* path = [NSString stringWithFormat:@"%@/%@",[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0],@"hotfix.js"];
//    NSLog(@"path = %@",path);
    return [[NSURL alloc] initFileURLWithPath:path];
}

@end
