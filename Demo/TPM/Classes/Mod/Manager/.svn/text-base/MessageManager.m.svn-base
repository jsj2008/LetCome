//
//  messageManager.m
//  QianFangGuJie
//
//  Created by tongshangren on 15/5/25.
//  Copyright (c) 2015年 JYZD. All rights reserved.
//

#import "messageManager.h"
#import "MessageEntity.h"
#import "MessageListEntity.h"

@implementation MessageManager
{

    MessageItemEntity *_entity;


}




-(void)getMessageByStartId:(NSString *)startid block:(ManagerReturnBlock)returnBlock{

    self.messageMock = [MessageMock mock];
    self.messageParam = [MessageParam param];
    self.messageParam.start_id = startid;
    self.messageParam.read_status = @"-1";
    self.messageParam.msg_type = @"-1";
    self.messageParam.sendMethod = @"GET";
    self.messageParam.limit = @"20";
    

    
    self.messageMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,QUMock *mock){
        if([response.pEntity isKindOfClass:[MessageItemEntity class]]){
            _entity = (MessageItemEntity*)response.pEntity;
        }
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.messageMock run:self.messageParam];
}




-(void)getMessageByStartId:(NSString *)startid type:(NSString *)msg_type block:(ManagerReturnBlock)returnBlock{
    
    self.messageMock = [MessageMock mock];
    self.messageParam = [MessageParam param];
    self.messageParam.start_id = startid;
    self.messageParam.read_status = @"-1";
    self.messageParam.msg_type = msg_type;
    self.messageParam.sendMethod = @"GET";
    self.messageParam.limit = @"20";
 
    self.messageMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,QUMock *mock){
        if([response.pEntity isKindOfClass:[MessageItemEntity class]]){
            _entity = (MessageItemEntity*)response.pEntity;
        }
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.messageMock run:self.messageParam];
}




/**标记全部消息为已读**/
-(void)readAllMsgWithType:(NSString *)msg_type block:(ManagerReturnBlock)returnBlock{
    self.messageReadMock = [MessageReadMock mock];
    self.messageReadParam = [MessageReadParam param];
    self.messageReadParam.msg_type = msg_type;
    self.messageReadParam.sendMethod=@"GET";
    self.messageReadMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,QUMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.messageReadMock run:self.messageReadParam];
}



-(void)getMessageNumWithType:(NSString *)msg_type status:(NSString *)read_status block:(ManagerReturnBlock)returnBlock{
    self.messageListMock = [MessageListMock mock];
    self.messageListParam = [MessageListParam param];
    self.messageListParam.msg_type = msg_type;
    self.messageListParam.read_status = read_status;
    self.messageListParam.sendMethod=@"GET";
    self.messageListMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,QUMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.messageListMock run:self.messageListParam];
}



-(void)getNoticeCountWithType:(NSString *)type Time:(NSString *)time block:(ManagerReturnBlock)returnBlock
{
    self.needNoticecntMock = [NeedNoticecntMock mock];
    self.needNoticecntParam = [NeedNoticecntParam param];
    self.needNoticecntParam.type = type;
    self.needNoticecntParam.from_time=time;
    self.needNoticecntMock.returnBlock = ^(QUNetAdaptor *adaptor,QUNetResponse *response,QUMock *mock){
        if(returnBlock!=nil){
            returnBlock([BaseManager convertResult:adaptor response:response],mock,response.pEntity);
        }
    };
    [self.needNoticecntMock run:self.needNoticecntParam];
}
@end
