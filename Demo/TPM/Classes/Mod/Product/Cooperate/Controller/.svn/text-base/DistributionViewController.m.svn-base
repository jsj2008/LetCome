//
//  DistributionViewController.m
//  TPM
//
//  Created by tongshangren on 16/7/29.
//  Copyright © 2016年 JYZD. All rights reserved.
//

#import "DistributionViewController.h"
#import "TradeCostViewController.h"
#import "PrePolicyCheckEntity.h"
#import "StrategyNotificationView.h"
#import "ResetNameViewController.h"
#import "MyWebViewController.h"
#import "ConfirmRiskEntity.h"
#import "AgreementManager.h"
#import "GetuserUnsignedAgreementEntity.h"
#import "GetAgreementInfoEntity.h"
#import "PreSimpleCheckEntity.h"

@interface DistributionViewController ()
@property(nonatomic,strong)StrategyNotificationView *notificationView;
@property(assign,nonatomic)BOOL riskConfirm;
@property(nonatomic,strong)ProductAgreementView *agreementView;
@end

@implementation DistributionViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    self.title=@"策略人权益";
    
    [self.btnNext addTarget:self action:@selector(prePolicyCheck) forControlEvents:UIControlEventTouchUpInside];
    [self.btnNext.layer setCornerRadius:2.0];
    self.btnNext.layer.masksToBounds=YES;
    
    
    [self preSimpleCheck];
    
    self.riskConfirm=NO;
    
    
    
    self.lblSuccessCost.text=self.schemeDetailEntity.success_cost;
    self.lblSuccessProfit.text=self.schemeDetailEntity.success_profit;
    self.lblSuccessLoss.text=self.schemeDetailEntity.success_loss;
    
    self.lblFailCost.text=self.schemeDetailEntity.fail_cost;
    self.lblFailProfit.text=self.schemeDetailEntity.fail_profit;
    self.lblFailLoss.text=self.schemeDetailEntity.fail_loss;
    
    self.lblStopPft.text=self.lblStopPft2.text=[NSString stringWithFormat:@"%.0f%%",[self.schemeDetailEntity.stop_profit_point floatValue]*100];
    
}

-(void)delayEnabledBtn:(UIButton *)btn{
    [btn setEnabled:NO];
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        [btn setEnabled:YES];
    });
}




-(void)preSimpleCheck{
    DEFINED_WEAK_SELF
    [[ProductsManager shareProductsManager]preSimpleCheckByStockCode:self.policyEntity.stock_code Block:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if ([entity isKindOfClass:[PreSimpleCheckEntity class]]) {
            PreSimpleCheckEntity *e=(PreSimpleCheckEntity *)entity;
            if ([e.bullish isEqualToString:@"Y"]) {
                [_self setBtn:_self.btnNext enabled:YES];
            }
            else if ([e.bullish isEqualToString:@"N"]){
                ///
                _self.viewError.hidden=NO;
                _self.lblError.text=e.error_reason_msg;
            }
            //[_self setBtn:_self.btnNext enabled:YES];
        }
    }];
}



-(void)prePolicyCheck{
    
    
    [self delayEnabledBtn:self.btnNext];
    
    
    if (![UserInfoManager hasLogin]) {
        [[PasswordWindow shareWindow] showWithLogin];
        return;
    }
    
    NSString *lastNotificationTime=[[NSUserDefaults standardUserDefaults] objectForKey:@"lastNotificationTime"];
    if (!lastNotificationTime||[lastNotificationTime isEqualToString:@""]) {
        lastNotificationTime=@"0";
    }
    NSTimeInterval nstime=[[NSDate date] timeIntervalSince1970];
    NSString *now = [NSString stringWithFormat:@"%ld", (long)nstime];
    int duration=[now intValue]-[lastNotificationTime intValue];
    
    
    DEFINED_WEAK_SELF
    [[ProductsManager shareProductsManager]prePolicyCheckBySchemeID:self.policyEntity.scheme_id investor_id:self.policyEntity.investor_id stock_Code:self.policyEntity.stock_code fund:self.policyEntity.fund cell_id:self.policyEntity.cell_id Block:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if ([entity isKindOfClass:[PrePolicyCheckEntity class]]) {
            PrePolicyCheckEntity *e=(PrePolicyCheckEntity *)entity;
            if ([e.result isEqualToString:@"Y"]) {
                [_self go2TradeCostView];
            }
            else if ([e.result isEqualToString:@"N"]&&e.reason){
                ResetNameViewController *nick;
                switch ([e.reason intValue]) {
                    case 1:
                        //去认证
                        [_self showNotificationWithTitle:@"认证通知" msg:e.msg];
                        _self.notificationView.btnFrame.hidden=NO;
                        [_self.notificationView.btnLeft setTitle:@"下次再说" forState:UIControlStateNormal];
                        [_self.notificationView.btnRight setTitle:@"立即认证" forState:UIControlStateNormal];
                        [_self.notificationView.btnRight addTarget:_self action:@selector(getQualification) forControlEvents:UIControlEventTouchUpInside];
                        break;
                    case 2:
                        //风险确认弹框（要用msg_id进行风险确认）
                        [_self showNotificationWithTitle:@"风险提醒" msg:e.msg];
                        _self.notificationView.btnFrame.hidden=YES;
                        _self.notificationView.btnConfirm.tag=[e.msg_id intValue];
                        [_self.notificationView.btnConfirm addTarget:_self action:@selector(confirmRisk:) forControlEvents:UIControlEventTouchUpInside];
                        [_self.notificationView.btnConfirm setTitle:@"知道了" forState:UIControlStateNormal];
                        break;
                    case 3:
                        //亏损过多确认框
                        if (duration<(86400*7)||_self.riskConfirm) {
                            [_self go2TradeCostView];
                            break;
                        }
                        [_self showNotificationWithTitle:@"风险告知" msg:e.msg];
                        _self.notificationView.btnFrame.hidden=NO;
                        [_self.notificationView.btnRight setTitle:@"确认" forState:UIControlStateNormal];
                        [_self.notificationView.btnRight addTarget:_self action:@selector(riskConfirmFunc) forControlEvents:UIControlEventTouchUpInside];
                        
                        [_self.notificationView.btnLeft setTitle:@"不再提醒" forState:UIControlStateNormal];
                        _self.notificationView.btnLeft.tag=[e.msg_id intValue];
                        [_self.notificationView.btnLeft addTarget:_self action:@selector(skipNoticeForOneWeek) forControlEvents:UIControlEventTouchUpInside];
                        break;
                    case 10:
                        //去获取未签署合约列表
                        [_self checkAllUnsignedAgreementWithType:e.agreement_type];
                        break;
                    case 20:
                        //去设置昵称
                        nick = [ResetNameViewController controller];
                        nick.view.backgroundColor = [UIColor colorWithRed:0 green:0 blue:0 alpha:.4];
                        nick.modalPresentationStyle = UIModalPresentationOverCurrentContext;
                        [_self presentViewController:nick animated:YES completion:nil];
//                        nick.delegate = _self;
                        break;
                    default:
                        [_self go2TradeCostView];
                        break;
                }
            }
        }
    }];
}




//检查所有未签署协议
-(void)checkAllUnsignedAgreementWithType:(NSString *)type{
    DEFINED_WEAK_SELF
    [[AgreementManager shareAgreementManager]getuserUnsignedAgreementWithType:type block:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if ([entity isKindOfClass:[GetuserUnsignedAgreementEntity class]]) {
            GetuserUnsignedAgreementEntity *e=(GetuserUnsignedAgreementEntity*)entity;
            if (e.res_data){
                //NSLog(@"展示未签署协议");
                
                NSMutableArray *IDArray=[[NSMutableArray alloc]initWithCapacity:0];
                for (GetuserUnsignedAgreementRes_dataEntity *ee in e.res_data) {
                    [IDArray addObject:ee.ID];
                }
                if (e.res_data.count==0) {
                    [_self go2TradeCostView];
                }
                else if (e.res_data.count==1) {
                    GetuserUnsignedAgreementRes_dataEntity *ee=e.res_data[0];
                    [_self getAgreementInfoWithID:IDArray[0] title:ee.name];
                }
            }
        }
    }];
}


//根据协议ID弹窗
-(void)getAgreementInfoWithID:(NSString *)ID title:(NSString *)title{
    DEFINED_WEAK_SELF
    //NSString *ID=[NSString stringWithFormat:@"%@",[IDArray objectAtIndex:0]];
    [[AgreementManager shareAgreementManager] getAgreementInfoWithID:ID block:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if (val.result) {
            GetAgreementInfoEntity *e = (GetAgreementInfoEntity *)entity;
            if (e.content) {
                NSArray *nibContents = [[NSBundle mainBundle] loadNibNamed:@"ProductAgreementView" owner:nil options:nil];
                _self.agreementView  = [nibContents lastObject];
                //_self.agreementView.agreementViewDelegate = _self;
                
                if (e) {
                    //[_self.controller presentViewController:controller animated:NO completion:nil];
                    
                    _self.agreementView.frame=[UIScreen mainScreen].bounds;
                    _self.agreementView.lblTitle.text=title;
                    
                    NSAttributedString *attrStr = [[NSAttributedString alloc] initWithData:[e.content dataUsingEncoding:NSUnicodeStringEncoding] options:@{ NSDocumentTypeDocumentAttribute: NSHTMLTextDocumentType} documentAttributes:nil error:nil];
                    _self.agreementView.agreementAttributedString=attrStr;
                    _self.agreementView.agreementTextView.font = [UIFont systemFontOfSize:12.f];
                    _self.agreementView.agreementString=attrStr.string;
                    [_self.agreementView fixViewFrame];
                    _self.agreementView.ID=ID;
                    //[_self.view addSubview:_self.agreementView];
                    [[[UIApplication sharedApplication] keyWindow] endEditing:YES];
                    
                    [_self.navigationController.view addSubview:_self.agreementView];
                }
                
            }
        }
    }];
}



-(void)riskConfirmFunc{
    self.riskConfirm=YES;
}

-(void)skipNoticeForOneWeek{
    NSTimeInterval nstime=[[NSDate date] timeIntervalSince1970];
    NSString *timeSp = [NSString stringWithFormat:@"%ld", (long)nstime];
    [[NSUserDefaults standardUserDefaults] setObject:timeSp forKey:@"lastNotificationTime"];
}

//弹出提示窗口
-(void)showNotificationWithTitle:(NSString *)title msg:(NSString *)msg{
    NSArray *nibContents = [[NSBundle mainBundle] loadNibNamed:@"StrategyNotificationView" owner:nil options:nil];
    self.notificationView= [nibContents objectAtIndex:0];
    //获取屏幕
    UIWindow *window = [[[UIApplication sharedApplication] windows] objectAtIndex:0];
    int winwidth=[UIScreen mainScreen].bounds.size.width;
    int winheight=[UIScreen mainScreen].bounds.size.height;
    self.notificationView.frame=CGRectMake(0,0, winwidth, winheight);
    self.notificationView.backgroundColor=[UIColor colorWithRed:0.0 green:0.0 blue:0.0 alpha:0.3];
    self.notificationView.lblTitle.text=title;
    self.notificationView.lblContent.text=msg;
    [window addSubview:self.notificationView];
}

//弹出认证页面
-(void)getQualification{
    MyWebViewController* controller = [[MyWebViewController alloc]initWithNibName:@"MyWebViewController" bundle:nil];
    controller.url = [NSString stringWithFormat:@"%@/riskcontrol/qualification/index?session_id=%@",[ConfigManager shareConfigManager].h5Url,[[UserInfoManager shareUserInfoManager] getSessionID]];
    controller.title = @"认证等级";
    controller.isBack2History = NO;
    [self.navigationController pushViewController:controller animated:YES];  
}


//根据msg_id（btn的tag值）确认风险
-(void)confirmRisk:(UIButton *)btn{
    NSString * ID=[NSString stringWithFormat:@"%ld",(long)btn.tag];
    DEFINED_WEAK_SELF
    [[ProductsManager shareProductsManager]confirmRiskByID:ID block:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if ([entity isKindOfClass:[ConfirmRiskEntity class]]) {
            ConfirmRiskEntity *e=(ConfirmRiskEntity *)entity;
            if ([e.result isEqualToString:@"Y"]) {
                [_self go2TradeCostView];
                [_self.notificationView removeFromSuperview];
            }
        }
    }];
    
}



-(void)go2TradeCostView{
    TradeCostViewController *tradeVC=[[TradeCostViewController alloc]initWithNibName:@"TradeCostViewController" bundle:nil];
    tradeVC.policyEntity=self.policyEntity;
    tradeVC.schemeDetailEntity=self.schemeDetailEntity;
    [self.navigationController pushViewController:tradeVC animated:YES];
}





- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
}


-(void)setBtn:(UIButton *)btn enabled:(BOOL)enable{
    if (enable) {
        [btn setEnabled:YES];
        [btn setBackgroundColor:[UIColor colorWithRed:83.0/255.0 green:142.0/255.0 blue:237.0/255.0 alpha:1.0]];
        [btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
    }else{
        [btn setEnabled:NO];
        [btn setBackgroundColor:[UIColor colorWithRed:224.0/255.0 green:224.0/255.0 blue:224.0/255.0 alpha:1.0]];
        [btn setTitleColor:[UIColor colorWithRed:190.0/255.0 green:190.0/255.0 blue:190.0/255.0 alpha:1.0] forState:UIControlStateNormal];
    }
}





@end
