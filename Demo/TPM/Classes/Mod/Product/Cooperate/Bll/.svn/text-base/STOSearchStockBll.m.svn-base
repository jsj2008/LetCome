//
//  STOSearchStockBll.m
//  CaoPanBao
//
//  Created by 余龙 on 14/11/3.
//  Copyright (c) 2014年 weihui. All rights reserved.
//

#import "STOSearchStockBll.h"
#import "STOStockListSection.h"
#import "STODBManager.h"
#import "STOSearchEntity.h"
//#import "STOProductViewController.h"
#import "IndexViewController.h"
#import "STOListNoticeSection.h"

#import "STOSearchViewController.h"
#import "STODBManager.h"
#import "H5ViewController.h"
//#import "StrategyPublishViewController.h"
//#import "STOSuperSchemeViewController.h"

#define DATABASE_FILE_NAME @"stocklist.db"

@interface STOSearchStockBll ()
{
    __weak STOSearchViewController *_searchController;
  
    NSString *_stockString;
    
    NSArray *myStockArray;
    
    BOOL _isClick;
    
    BOOL haslogin;
    
 //    UIButton *banButton ;
}

@end

@implementation STOSearchStockBll

- (void)loadBll
{
    [super loadBll];
    
    
    
    STOSearchViewController *c = (STOSearchViewController *)self.controller;
    _searchController = c;//获取控制器，便于此bll使用
    
    

    myStockArray=[[STODBManager shareSTODBManager]getmyStcokList];
    _isClick = YES;
    haslogin = [UserInfoManager hasLogin];
    
    

}






//copy file
- (void)copySotockDBFiler{
    NSArray *searchPaths = NSSearchPathForDirectoriesInDomains(
                                                               NSDocumentDirectory,
                                                               NSUserDomainMask,
                                                               YES);
    NSString *documentFolderPath = [searchPaths objectAtIndex:0];
    
    //往应用程序路径中添加数据库文件名称，把它们拼接起来， 这里用到了宏定义（目的是不易出错)
    NSString *dbFilePath = [documentFolderPath stringByAppendingPathComponent:DATABASE_FILE_NAME];//#define DATABASE_FILE_NAME @"text.db"
    //1. 创建NSFileManager对象  NSFileManager包含了文件属性的方法
    NSFileManager *fm = [NSFileManager defaultManager];
    
    //2. 通过 NSFileManager 对象 fm 来判断文件是否存在，存在 返回YES  不存在返回NO
    BOOL isExist = [fm fileExistsAtPath:dbFilePath];
    //- (BOOL)fileExistsAtPath:(NSString *)path;
    
    //如果不存在 isExist = NO，拷贝工程里的数据库到Documents下
    if (!isExist)
    {
        //拷贝数据库
        
        //获取工程里，数据库的路径,因为我们已在工程中添加了数据库文件，所以我们要从工程里获取路径
        NSString *backupDbPath = [[NSBundle mainBundle]
                                  pathForResource:DATABASE_FILE_NAME
                                  ofType:nil];
        //这一步实现数据库的添加，
        // 通过NSFileManager 对象的复制属性，把工程中数据库的路径拼接到应用程序的路径上
        BOOL cp = [fm copyItemAtPath:backupDbPath toPath:dbFilePath error:nil];
        if (cp) {
            WPNSLOG(@"复制成功");
        }
    }
}





- (void)initQuickUI:(QUTableView *)tableView
{
    self.pAdaptor = [QUFlatAdaptor adaptorWithTableView:tableView nibArray:@[@"STOStockListSection",@"STOListNoticeSection"] delegate:self];
    [self addStockLimit];
}


-(void)addStockLimit{
    [self.pAdaptor.pSources clear];
    QUEntity *noticeEntity=[QUEntity entity];
    noticeEntity.tag=100;
    [self.pAdaptor.pSources addEntity:noticeEntity withSection:[STOListNoticeSection class]];
    [self.pAdaptor notifyChanged];
}


- (void)setSearchText:(NSString *)searchText
{
    myStockArray=[[STODBManager shareSTODBManager]getmyStcokList];

    _searchText = searchText;
    
    
    if (searchText.length==0) {
        [self addStockLimit];
        return;
    }
    
    
    
    
    MatchingType type = [self matchingTypeWithSearchText:searchText];
    
   NSArray *stockArr = [[STODBManager shareSTODBManager] searchStockWithMathingType:type searchText:searchText];
    _stockString = [stockArr firstObject];
    //移除之前的数据
    [self.pAdaptor.pSources clear];
    for (STOSearchEntity *e in stockArr) {
        [self.pAdaptor.pSources addEntity:e withSection:[STOStockListSection class]];
    }
    
    
    if (stockArr.count==0) {
        QUEntity *noticeEntity=[QUEntity entity];
        noticeEntity.tag=101;
        [self.pAdaptor.pSources addEntity:noticeEntity withSection:[STOListNoticeSection class]];
    }
    
    [self.pAdaptor notifyChanged];
}

- (MatchingType)matchingTypeWithSearchText:(NSString *)searchText{
    NSString *regexHanzi = @"^[\u2E80-\u9FFF]+$";
    NSString *regexAbbr = @"^[A-Za-z]+$";
    NSString *regexNum = @"^([0-9])+$";
    
    //排除乱码，用于新数据存储到数据库
    
    NSPredicate *predicateHanzi = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", regexHanzi];
    NSPredicate *predicateNum = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", regexNum];
    NSPredicate *predicateAbbr = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", regexAbbr];
    if ([predicateHanzi evaluateWithObject:searchText]) {
        return MatchingTypeStockName;
    } else if ([predicateAbbr evaluateWithObject:searchText]) {
        return MatchingTypeStockAbbr;
    } else if ([predicateNum evaluateWithObject:searchText]){
        return MatchingTypeStockCode;
    }
    return 0;
}

- (void)QUAdaptor:(QUAdaptor *)adaptor forSection:(QUSection *)section forEntity:(QUEntity *)entity
{
    if ([section isMemberOfClass:[STOStockListSection class]]) {
        myStockArray=[[STODBManager shareSTODBManager]getmyStcokList];
        STOStockListSection *s = (STOStockListSection *)section;
        STOSearchEntity *e = (STOSearchEntity *)entity;
        s.stockNameLab.text = e.stockName;
        s.stockCodeLab.text = e.stockCode;
        s.stockKindLab.text=e.stockKind;
        //s.stockAb.text = e.stockAb;

        
        
        
                BOOL isFocus=NO;
        for (HqRecordsEntity *recordsEntity in myStockArray) {
            if ([recordsEntity.stockcode isEqual:e.stockCode]) {
                isFocus=YES;
                break;
            }
        }

    }
    else if([section isKindOfClass:[STOListNoticeSection class]]){
        STOListNoticeSection* s=(STOListNoticeSection *)section;
        if (entity.tag==100) {
            
            NSMutableAttributedString *attributeStr = [[NSMutableAttributedString alloc] initWithString:[NSString stringWithFormat:@"目前共有%@只个股策略征集中",_searchController.stock_total]];
            [attributeStr addAttribute:NSForegroundColorAttributeName value:Color_Bg_RGB(255, 120, 20) range:NSMakeRange(4, _searchController.stock_total.length)];
            
            s.lblNotice.attributedText=attributeStr;
            
            //s.lblNotice.text=[NSString stringWithFormat:@"目前共有%@只个股策略征集中",_searchController.stock_total];

        }
        else if(entity.tag==101){
            s.lblNotice.text=@"暂时搜索不到您输入的股票代码";
        }
    }
}

#pragma mark - 点击选择section
- (void)QUAdaptor:(QUAdaptor *)adaptor selectedSection:(QUSection *)section entity:(QUEntity *)entity
{
    if ([section isMemberOfClass:[STOStockListSection class]]) {
        //保存历史搜索记录
        //[[STODBManager shareSTODBManager]saveSearchHistory: self.searchText];
        
        
        STOSearchEntity *e = (STOSearchEntity *)entity;
        
        [[STODBManager shareSTODBManager]saveVisitHistory:e.stockCode];
        
        NSDictionary *dict = @{@"stockname":e.stockName,@"stockcode":e.stockCode,@"code_shsz":e.codeShsz};
        [[NSUserDefaults standardUserDefaults]setObject:dict forKey:@"stockdict"];
        
        //[_searchController gotoSuperScheme:e];
        
        _searchController.search.text=e.stockCode;
        
        [_searchController showDetail];

    }
}


//谈话框
- (void)wpAlertViewDelegateYesButtonClick:(id)sender andPayload:(id)payload
{
     UIAlertView *aler = (UIAlertView *)sender;
    if (aler.tag == 50 ) {
        _searchController.search.text = @"";
    }
}





- (void)dealloc {
    _searchController.search = nil;
    _searchController = nil;
    
    WPNSLOG(@"---------股票搜索展示页释放");
}


@end
