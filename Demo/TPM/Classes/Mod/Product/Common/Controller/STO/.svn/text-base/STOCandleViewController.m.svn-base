//
//  STOCandleViewController.m
//  STO
//
//  Created by  rjt on 16/3/14.
//  Copyright © 2016年 JYZD. All rights reserved.
//

#import "STOCandleViewController.h"
#define kAUChartOffset 0.f
@interface STOCandleViewController (){
    __weak UIButton *selectBtn;
}
@property (strong,nonatomic) NSMutableArray * graphies;
@property (strong,nonatomic) NSMutableArray * btns;
@property (strong,nonatomic) ProductVolChartEntity * volEntity;
@property (strong,nonatomic) ProductChartEntity * chartEntity;
@property (strong,nonatomic) ProductKChartEntity * d1Entity;
@property (strong,nonatomic) ProductKChartEntity * m5Entity;
@property (strong,nonatomic) ProductKChartEntity * m15Entity;
@property (strong,nonatomic) ProductKChartEntity * m30Entity;
@property (strong,nonatomic) ProductKChartEntity * m60Entity;

@property(nonatomic,strong)NSMutableArray* records;

@property(nonatomic,strong)NSMutableArray* sellPrices;

@end

@implementation STOCandleViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    
    self.graphies = [[NSMutableArray alloc] init];
    self.btns = [[NSMutableArray alloc] init];
    
    [self.graphies addObject:self.chartView];
    [self.btns addObject:self.chartBtn];
    
    [self.graphies addObject:self.m30Chart];
    [self.btns addObject:self.m30Btn];
    
    [self.graphies addObject:self.m5Chart];
    [self.btns addObject:self.m5Btn];
    [self.graphies addObject:self.m15Chart];
    [self.btns addObject:self.m15Btn];
    [self.graphies addObject:self.m60Chart];
    [self.btns addObject:self.m60Btn];
    [self.graphies addObject:self.d1Chart];
    [self.btns addObject:self.d1Btn];
    
    //    self.btnView.hidden = YES;//暂时隐去
    
    [self clickBtnDisplayGraph:self.chartBtn];
    
    [self.chartView installChartWithLine:YES histogram:YES handicap:YES stock:YES resize:YES thumb:NO];
    [self.d1Chart loadKChartWithVol:YES andLevel:2 andResize:NO andPrecision:2];
    self.d1Chart.openGesture = YES;
    [self.m30Chart loadKChartWithVol:YES andLevel:2 andResize:NO andPrecision:2];
    self.m30Chart.openGesture = YES;
    [self.m5Chart loadKChartWithVol:YES andLevel:2 andResize:NO andPrecision:2];
    self.m5Chart.openGesture = YES;
    [self.m15Chart loadKChartWithVol:YES andLevel:2 andResize:NO andPrecision:2];
    self.m15Chart.openGesture = YES;
    [self.m60Chart loadKChartWithVol:YES andLevel:2 andResize:NO andPrecision:2];
    self.m60Chart.openGesture = YES;
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}


#pragma mark - 按钮点击事件
- (IBAction)clickBtnDisplayGraph:(UIButton *)btn {
    selectBtn.selected = NO;
    btn.selected = YES;
    for (int i=0; i<self.btns.count; ++i) {
        UIButton* b = (UIButton*)self.btns[i];
        UIView* t = (UIView*)self.graphies[i];
        if (b == btn) {
            t.hidden = NO;
            [b setTitleColor:[UIColor whiteColor] forState:UIControlStateSelected];
            
            [btn setBackgroundImage:[self imageWithR:80.f G:140.f B:250.f alpha:1] forState:UIControlStateSelected];
            
        }else{
            t.hidden = YES;
            [btn setTitleColor:Color_Confirm_Gray forState:UIControlStateNormal];
            [btn setBackgroundImage:nil forState:UIControlStateNormal];
            
            
        }
    }
    selectBtn = btn;

}

-(void)refreshPankou:(ProductPanKouEntity*)e{
    [self.chartView drawChartWithHandicap:e];
    [self.d1Chart drawNewPrice:e];
    [self.m30Chart drawNewPrice:e];
    [self.m5Chart drawNewPrice:e];
    [self.m15Chart drawNewPrice:e];
    [self.m60Chart drawNewPrice:e];
}
//
-(void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];

    self.chartView.precision = 2;
    
    [self refreshChart];
}

-(void)refreshChart{
    if (![[WHTimerManager shareTimerManager] hasNotifyName:kGraphCandle]) {
        [[WHTimerManager shareTimerManager] addTarget:self selector:@selector(refreshGraphDataSource) notifyName:kGraphCandle];
    }
}

-(void)viewDidDisappear:(BOOL)animated{
    [[WHTimerManager shareTimerManager] removeTarget:self notifyName:kGraphCandle];
    [[WHOnceTask shareOnceTask] removeTask:kHqCandleChartKey];
    [[WHOnceTask shareOnceTask] removeTask:kHqD1ChartKey];
    [[WHOnceTask shareOnceTask] removeTask:kHqM1ChartKey];
    [[WHOnceTask shareOnceTask] removeTask:kHqM5ChartKey];
    [[WHOnceTask shareOnceTask] removeTask:kHqM15ChartKey];
    [[WHOnceTask shareOnceTask] removeTask:kHqM60ChartKey];
}

- (void)refreshGraphDataSource {
    //分时图
    if ([[WHOnceTask shareOnceTask]expired:kHqCandleChartKey validTime:kHqCandleChartVal]) {
        [self getChart];
        [self getVolChart];
    }
    //k线图
    if ([[WHOnceTask shareOnceTask] expired:kHqD1ChartKey validTime:kHqD1ChartVal]) {
        [self getD1Chart];
    }
    //5k线图
    if ([[WHOnceTask shareOnceTask] expired:kHqM1ChartKey validTime:kHqM1ChartVal]) {
        [self getm30Chart];
    }
    //5k线图
    if ([[WHOnceTask shareOnceTask] expired:kHqM5ChartKey validTime:kHqM5ChartVal]) {
        [self getm5Chart];
    }
    //5k线图
    if ([[WHOnceTask shareOnceTask] expired:kHqM15ChartKey validTime:kHqM15ChartVal]) {
        [self getm15Chart];
    }
    //5k线图
    if ([[WHOnceTask shareOnceTask] expired:kHqM60ChartKey validTime:kHqM60ChartVal]) {
        [self getm60Chart];
    }
    
}

-(void)getChart{
    DEFINED_WEAK_SELF
    [self.manager refreshChart:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if (val.result) {
            _self.chartEntity = (ProductChartEntity *)entity;
            [_self refreshHqChart];
        }
    }];
}

-(void)getVolChart{
    DEFINED_WEAK_SELF
    [self.manager refreshVolChart:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if (val.result) {
            _self.volEntity = (ProductVolChartEntity *)entity;
            [_self refreshVolChart];
        }
    }];
}

-(void)getD1Chart{
    DEFINED_WEAK_SELF
    [self.manager refreshKChart:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if (val.result) {
            _self.d1Entity = (ProductKChartEntity*)entity;
            [_self refreshKchart];
        }
    }];
}
-(void)getm30Chart{
    DEFINED_WEAK_SELF
    [self.manager refreshMin30KChart:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if (val.result) {
            _self.m30Entity = (ProductKChartEntity*)entity;
            [_self refresh30Kchart];
        }
    }];
}
-(void)getm5Chart{
    DEFINED_WEAK_SELF
    [self.manager refreshMin5KChart:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if (val.result) {
            _self.m5Entity = (ProductKChartEntity*)entity;
            [_self refresh5Kchart];
        }
    }];
}
-(void)getm15Chart{
    DEFINED_WEAK_SELF
    [self.manager refreshMin15KChart:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if (val.result) {
            _self.m15Entity = (ProductKChartEntity*)entity;
            [_self refresh15Kchart];
        }
    }];
}
-(void)getm60Chart{
    DEFINED_WEAK_SELF
    [self.manager refreshMin60KChart:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if (val.result) {
            _self.m60Entity = (ProductKChartEntity*)entity;
            [_self refresh60Kchart];
        }
    }];
}

-(void)refreshHqChart{
    
    ProductChartEntity* ee = self.chartEntity;
    NSInteger second = 1.5*60*60;//开盘的秒数
    NSArray * splittime=@[[NSDate dateWithTimeIntervalSince1970:second],
                          [NSDate dateWithTimeIntervalSince1970:second+1*60*60],
                          [NSDate dateWithTimeIntervalSince1970:second+2*60*60],
                          [NSDate dateWithTimeIntervalSince1970:second+4.5*60*60],
                          [NSDate dateWithTimeIntervalSince1970:second+5.5*60*60],
                          ];
    NSArray * splitdiffer=@[@0,@(1*60),@(2*60),@(4.5*60-1.5*60),@(5.5*60-1.5*60)
                            ];
    int minutes = 240+1;//股票
    if (ee && [ee.stockcode isEqualToString: self.manager.stoEntity.stockCode]) {
        //STO
        NSRange range = [ee.markettime rangeOfString:kSTOCloseTime];
        if(range.length > 0){
            [self.chartView endPulse];
        }else{
            [self.chartView startPulse];
        }
        [self.chartView drawChartWithPrices:ee.records yClose:ee.Yclose highPrice:ee.High lowPrice:ee.Low openPrice:ee.Open time:ee.markettime animation:NO allMinutes:minutes  spliteTime:splittime splitDiffer:splitdiffer];
        
        
    }
    [self.pAdaptor notifyChanged];
}

-(void)refreshVolChart{
    
    ProductVolChartEntity* ev = self.volEntity;
    NSInteger second = 1.5*60*60;//开盘的秒数
    NSArray * splittime=@[[NSDate dateWithTimeIntervalSince1970:second],
                          [NSDate dateWithTimeIntervalSince1970:second+1*60*60],
                          [NSDate dateWithTimeIntervalSince1970:second+2*60*60],
                          [NSDate dateWithTimeIntervalSince1970:second+4.5*60*60],
                          [NSDate dateWithTimeIntervalSince1970:second+5.5*60*60],
                          ];
    NSArray * splitdiffer=@[@0,@(1*60),@(2*60),@(4.5*60-1.5*60),@(5.5*60-1.5*60)
                            ];
    int minutes = 240+1;//股票
    if (ev) {
        //STO
        [self.chartView drawChartWithVols:ev.records animation:NO allMinutes:minutes spliteTime:splittime splitDiffer:splitdiffer];
        
    }
    [self.pAdaptor notifyChanged];
}


#pragma mark - 刷新K线图
-(void)refreshKchart{
    ProductKChartEntity* kEntity = self.d1Entity;
    if (kEntity && [kEntity.stockcode isEqualToString: self.manager.stoEntity.stockCode]) {
        //STO
        [self.d1Chart drawChart:[self getVaildateKRecords:kEntity]];
        [self.pAdaptor notifyChanged];
    }
}
#pragma mark - 刷新K线图
-(void)refresh5Kchart{
    ProductKChartEntity* kEntity = self.m5Entity;
    if (kEntity && [kEntity.stockcode isEqualToString: self.manager.stoEntity.stockCode]) {
        //STO
        [self.m5Chart drawChart:[self getVaildateKRecords:kEntity]];
        [self.pAdaptor notifyChanged];
    }
}
-(void)refresh30Kchart{
    ProductKChartEntity* kEntity = self.m30Entity;
    if (kEntity && [kEntity.stockcode isEqualToString: self.manager.stoEntity.stockCode]) {
        //STO
        [self.m30Chart drawChart:[self getVaildateKRecords:kEntity]];
        [self.pAdaptor notifyChanged];
    }
}
-(void)refresh15Kchart{
    ProductKChartEntity* kEntity = self.m15Entity;
    if (kEntity && [kEntity.stockcode isEqualToString: self.manager.stoEntity.stockCode]) {
        //STO
        [self.m15Chart drawChart:[self getVaildateKRecords:kEntity]];
        [self.pAdaptor notifyChanged];
    }
}
-(void)refresh60Kchart{
    ProductKChartEntity* kEntity = self.m60Entity;
    if (kEntity && [kEntity.stockcode isEqualToString: self.manager.stoEntity.stockCode]) {
        //STO
        [self.m60Chart drawChart:[self getVaildateKRecords:kEntity]];
        [self.pAdaptor notifyChanged];
    }
}

-(NSArray*)getVaildateKRecords:(ProductKChartEntity*)kEntity{
    NSMutableArray *KChartValidRecords = [[NSMutableArray alloc]init];
    NSInteger count = [kEntity.records count];
    
    ProductKChartRecordsEntity* ordersEntity = [kEntity.records objectAtIndex:0];
    float kHighPrice = 0;
    float kLowPrice = 9999;
    for (int i = 0; i<count; i++) {
        ordersEntity = [kEntity.records objectAtIndex:i];
        if ([ordersEntity.High floatValue]>0) {
            if ([ordersEntity.New isEqualToString:ordersEntity.Open]) {
                if ([ordersEntity.New floatValue]>[ordersEntity.YClose floatValue]) {
                    float price = [ordersEntity.New floatValue] - 0.01;
                    ordersEntity.Open = [NSString stringWithFormat:@"%f",price];
                }
                else{
                    float price = [ordersEntity.New floatValue] - 0.01;
                    ordersEntity.New = [NSString stringWithFormat:@"%f",price];
                }
                
            }
            [KChartValidRecords addObject:ordersEntity];
            
        }
    }
    for (int i = 0; i<[KChartValidRecords count]; i++) {
        ordersEntity = [KChartValidRecords objectAtIndex:i];
        if ([ordersEntity.High floatValue]<=0) {
            ordersEntity.High = ordersEntity.YClose;
        }
        if ([ordersEntity.Low floatValue]<=0) {
            ordersEntity.Low = ordersEntity.YClose;
        }
        if ([ordersEntity.Open floatValue]<=0) {
            ordersEntity.Open = ordersEntity.YClose;
        }
        if ([ordersEntity.New floatValue]<=0) {
            ordersEntity.New = ordersEntity.YClose;
        }
        if ([ordersEntity.High floatValue]>kHighPrice) {
            kHighPrice = [ordersEntity.High floatValue];
        }
        if ([ordersEntity.Low floatValue]<kLowPrice) {
            kLowPrice = [ordersEntity.Low floatValue];
        }
    }
    return KChartValidRecords;
}

-(void)dealloc{
    [[WHTimerManager shareTimerManager] removeTarget:self notifyName:kGraphCandle];
    [[WHOnceTask shareOnceTask] removeTask:kHqCandleChartKey];
    [[WHOnceTask shareOnceTask] removeTask:kHqD1ChartKey];
    [[WHOnceTask shareOnceTask] removeTask:kHqM1ChartKey];
    [[WHOnceTask shareOnceTask] removeTask:kHqM5ChartKey];
    [[WHOnceTask shareOnceTask] removeTask:kHqM15ChartKey];
    [[WHOnceTask shareOnceTask] removeTask:kHqM60ChartKey];
}

@end
