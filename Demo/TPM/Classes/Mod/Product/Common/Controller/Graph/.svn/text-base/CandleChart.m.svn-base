//
//  CandleChart.m
//  A50
//
//  Created by  rjt on 16/1/28.
//  Copyright © 2016年 JYZD. All rights reserved.
//

#import "CandleChart+Gesture.h"
#import "ProductKChartEntity.h"

@implementation CandleChart
-(void)loadKChartWithVol:(BOOL)hasVol andLevel:(int)level andResize:(BOOL)resize andPrecision:(int)precision{
    _hasVol = hasVol;
    _level = level;
    _resize = resize;
    _precision = precision;
    
    _per = 15;
    _offset = 0;
    _labelWidth = 80;
    _layers = [[NSMutableArray alloc] init];
    _labelHeight = 15;
    _hFill = 5;//填充10个格子
    
    _timelabellayer = [CALayer layer];
    
    [self.layer addSublayer:_timelabellayer];
    
}

-(void)layoutSubviews{
    CGRect frame = self.frame;
    
    frame.size.height -= _labelHeight;//减去最下面的时间条
    if (_hasVol){
        CGRect candleFrame = CGRectMake(0, 0, frame.size.width ,frame.size.height*0.7);//70%为蜡烛图
        [self loadCandleChart:candleFrame];
        CGRect volFrame = CGRectMake(0, candleFrame.origin.y+candleFrame.size.height, frame.size.width ,frame.size.height*0.3);//30%为交易量图
        [self loadVolChart:volFrame];
    }else{
        [self loadCandleChart:frame];
    }
    
    
    _timelabellayer.frame = CGRectMake(0, frame.size.height, frame.size.width ,_labelHeight);
}

-(void)singleTapped:(UITapGestureRecognizer *)sender{
    CALayer *l = [_increaseLayer hitTest:[sender locationInView:self]];
    if (l != nil) {
        if (_level>1) {
            _level--;
            if (_level==1) {
                _increaseLayer.contents = (__bridge id)([UIImage imageNamed:@"jiadisabled"].CGImage);
            }else{
                _increaseLayer.contents = (__bridge id)([UIImage imageNamed:@"jia"].CGImage);
            }
            _reduceLayer.contents = (__bridge id)([UIImage imageNamed:@"jian"].CGImage);
        }
        [self drawKChart];
    }
    
    l = [_reduceLayer hitTest:[sender locationInView:self]];
    if (l != nil) {
        if (_level<8) {
            _level++;
            if (_level==8) {
                _reduceLayer.contents = (__bridge id)([UIImage imageNamed:@"jiandisabled"].CGImage);
            }else{
                _reduceLayer.contents = (__bridge id)([UIImage imageNamed:@"jian"].CGImage);
            }
            _increaseLayer.contents = (__bridge id)([UIImage imageNamed:@"jia"].CGImage);
        }
        [self drawKChart];
    }
    
}

//初始化蜡烛图部分
-(void)loadCandleChart:(CGRect)frame{
    [_candlelayer removeFromSuperlayer];
    _candlelayer = [CAShapeLayer layer];
    //绘制图表边框
    _candlelayer.borderWidth = 1;
    _candlelayer.borderColor = GRAY_LINE_COLOR.CGColor;
    _candlelayer.contentsGravity = kCAGravityResizeAspect;
    _candlelayer.zPosition = -1;
    [self.layer addSublayer:_candlelayer];
    
    _candleMAlabellayer = [CALayer layer];
    [self.layer addSublayer:_candleMAlabellayer];
    

    
    //设置大小
    _candleMAlabellayer.frame = CGRectMake(frame.origin.x, frame.origin.y , frame.size.width , _labelHeight);
    _candlelayer.frame = CGRectMake(frame.origin.x, _candleMAlabellayer.frame.origin.y+_candleMAlabellayer.frame.size.height, frame.size.width ,frame.size.height-_candleMAlabellayer.frame.size.height);
    
    if (_resize) {
        _increaseLayer = [CALayer layer];
        if (_level>1) {
            _increaseLayer.contents = (__bridge id)([UIImage imageNamed:@"jia"].CGImage);
        }else{
            _increaseLayer.contents = (__bridge id)([UIImage imageNamed:@"jiadisabled"].CGImage);
        }
        
        _reduceLayer = [CALayer layer];
        if (_level<8) {
            _reduceLayer.contents = (__bridge id)([UIImage imageNamed:@"jian"].CGImage);
        }else{
            _reduceLayer.contents = (__bridge id)([UIImage imageNamed:@"jiandisabled"].CGImage);
        }
        

        
        UITapGestureRecognizer *tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(singleTapped:)];
        //点击一下响应，
        tapGesture.numberOfTapsRequired = 1;
        [self addGestureRecognizer:tapGesture];
        
        [self.layer addSublayer:_reduceLayer];
        [self.layer addSublayer:_increaseLayer];
    }
    
    if(iPhone6Plus){
        _increaseLayer.frame = CGRectMake(_candlelayer.frame.size.width-33-30, _candlelayer.frame.origin.y+_candlelayer.frame.size.height-13-31, 33 ,31);
        _reduceLayer.frame = CGRectMake(_increaseLayer.frame.origin.x-12-33, _increaseLayer.frame.origin.y, 33 ,31);
    }else{
        _increaseLayer.frame = CGRectMake(_candlelayer.frame.size.width-33-15, _candlelayer.frame.origin.y+_candlelayer.frame.size.height-13-31, 33 ,31);
        _reduceLayer.frame = CGRectMake(_increaseLayer.frame.origin.x-12-33, _increaseLayer.frame.origin.y, 33 ,31);
    }
}



//初始化交易量部分
-(void)loadVolChart:(CGRect)frame{
    _vollayer = [CAShapeLayer layer];
    //绘制图表边框
    _vollayer.borderWidth = 1;
    _vollayer.borderColor = GRAY_LINE_COLOR.CGColor;
    _vollayer.contentsGravity = kCAGravityResizeAspect;
    [self.layer addSublayer:_vollayer];
    
    _volMAlabellayer = [CALayer layer];
    [self.layer addSublayer:_volMAlabellayer];
    
    //设置大小
    _volMAlabellayer.frame = CGRectMake(frame.origin.x, frame.origin.y , frame.size.width , _labelHeight);
    _vollayer.frame = CGRectMake(frame.origin.x, _volMAlabellayer.frame.origin.y+_volMAlabellayer.frame.size.height, frame.size.width ,frame.size.height-_volMAlabellayer.frame.size.height);
}

-(void)drawChart:(NSArray *)records {
    _records = records;
    [self drawKChart];
}

-(void)drawKChart{
    //清除layer
    for (int i = 0;i<_layers.count;++i) {
        CALayer* layer = (CALayer*)_layers[i];
        [layer removeFromSuperlayer];
        
    }
    [_layers removeAllObjects];


    //初始化数据
    for (int i= 0 ; i < _records.count; ++i) {
        ProductKChartRecordsEntity *entity = (ProductKChartRecordsEntity*)_records[i];
        NSArray *tmp = [self avgFrom:i length:5];
        entity.MA5 = [tmp[0] floatValue];
        entity.VOL5 = [tmp[1]floatValue];
        
        tmp = [self avgFrom:i length:10];
        entity.MA10 = [tmp[0] floatValue];
        entity.VOL10 = [tmp[1]floatValue];
        
        tmp = [self avgFrom:i length:20];
        entity.MA20 = [tmp[0] floatValue];
        entity.VOL20 = [tmp[1]floatValue];
        
        tmp = [self avgFrom:i length:60];
        entity.MA60 = [tmp[0] floatValue];
        entity.VOL60 = [tmp[1]floatValue];
    }
    
    [self drawPoint];
}

//画K线
-(void)drawPoint{
    NSInteger total = _level * _per;
    
    if ( total > (_records.count-_offset)){
        total = (_records.count-_offset);
    }
    
    //计算每份的宽度
    float per_candle_width = _candlelayer.frame.size.width/(_level*_per);
    
    float ma5 = 0;float vol5 = 0;
    float ma10 = 0;float vol10 = 0;
    float ma20 = 0;
    float ma60 = 0;
    float maxprice =0,minprice =999999999,maxvol=0,minvol=999999999999;
    
    ProductKChartRecordsEntity *firste = nil;
    ProductKChartRecordsEntity *laste = nil;
    
    NSMutableArray* points = [[NSMutableArray alloc] init];
    for (NSInteger i=(_records.count-_offset)-total; i < (_records.count-_offset); ++i) {
        ProductKChartRecordsEntity *entity = (ProductKChartRecordsEntity*)_records[i];
        if ([entity.Low floatValue]>0) {
            ma5 = entity.MA5 ; vol5 = entity.VOL5;
            ma10 = entity.MA10 ; vol10 = entity.VOL10;
            ma20 = entity.MA20 ;
            ma60 = entity.MA60 ;
            
            maxprice = [entity.High floatValue]> maxprice ? [entity.High floatValue] : maxprice;
            maxprice = entity.MA5> maxprice ? entity.MA5 : maxprice;
            maxprice = entity.MA10> maxprice ? entity.MA10 : maxprice;
            maxprice = entity.MA20> maxprice ? entity.MA20 : maxprice;
            maxprice = entity.MA60> maxprice ? entity.MA60 : maxprice;
            
            maxvol = [entity.Volume floatValue]> maxvol ? [entity.Volume floatValue] : maxvol;
            maxvol = entity.VOL5> maxvol ? entity.VOL5 : maxvol;
            maxvol = entity.VOL10> maxvol ? entity.VOL10 : maxvol;
            
            minprice = [entity.Low floatValue]< minprice ? [entity.Low floatValue] : minprice;
            minprice = entity.MA5< minprice && entity.MA5 ? entity.MA5 : minprice;
            minprice = entity.MA10< minprice && entity.MA10 ? entity.MA10 : minprice;
            minprice = entity.MA20< minprice && entity.MA20 != 0  ? entity.MA20 : minprice;
            minprice = entity.MA60< minprice && entity.MA60 != 0 ? entity.MA60 : minprice;
            
            minvol = [entity.Volume floatValue]< minvol ? [entity.Volume floatValue] : minvol;
            minvol = entity.VOL5 < minvol && entity.VOL5!=0 ? entity.VOL5 : minvol;
            minvol = entity.VOL10 < minvol && entity.VOL10!=0 ? entity.VOL10 : minvol;
            
            if (firste == nil) {
                firste = entity;
            }
            laste = entity;
            [points addObject:entity];
        }
        
    }

   //画价格均线的均价
    CATextLayer* revLayer = nil;
    NSArray* MAs = @[[NSNumber numberWithFloat:ma5],[NSNumber numberWithFloat:ma10],[NSNumber numberWithFloat:ma20],[NSNumber numberWithFloat:ma60]];
    NSArray* MAColors = @[FIVE_LINE_COLOR,TEN_LINE_COLOR,TWENTY_LINE_COLOR,SIXTY_LINE_COLOR];
    NSArray* MALabels = @[@"MA5",@"MA10",@"MA20",@"MA60"];
    for(int i = 0;i<MAs.count;++i){
        float ma = [MAs[i] floatValue];
        if (ma>0) {
            CATextLayer* layer = [CATextLayer layer];
            [_layers addObject:layer];
            [_candleMAlabellayer addSublayer:layer];
            //        layer.string = [NSString stringWithFormat:@"MA5: %.2f",ma5];
            layer.string = [NSString stringWithFormat:([NSString stringWithFormat:@"%@: %%.%df",MALabels[i],_precision]),ma];
            layer.contentsScale = 2;
            layer.foregroundColor = ((UIColor*)MAColors[i]).CGColor ;
            layer.fontSize = 10.f; //字体的大小
            layer.alignmentMode = kCAAlignmentLeft;//字体的对齐方式
            CGRect size = [layer.string boundingRectWithSize:CGSizeMake(1000,100 ) options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:10]} context:nil];
            if(revLayer){
                layer.frame = CGRectMake(revLayer.frame.origin.x+revLayer.frame.size.width +8, 0, size.size.width, _labelHeight);
            }else{
                layer.frame = CGRectMake(0, 0, size.size.width, _labelHeight);
            }
            revLayer = layer;
        }
    }
    
    //画横分割虚线及价格
    float perheight = _candlelayer.frame.size.height/4;
    _maxPrice = maxprice;
    _minPrice = minprice;
//    _maxPrice = maxprice>[_newPrice.High floatValue]?maxprice:[_newPrice.High floatValue];
//    _minPrice = minprice<[_newPrice.Low floatValue]?minprice:[_newPrice.Low floatValue];
    
    [self drawHDash:CGPointMake(0, perheight * 0) width:_candlelayer.frame.size.width price:(maxprice - (maxprice-minprice)/4*0)];
    [self drawHDash:CGPointMake(0, perheight * 1) width:_candlelayer.frame.size.width price:(maxprice - (maxprice-minprice)/4*1)];
    [self drawHDash:CGPointMake(0, perheight * 2) width:_candlelayer.frame.size.width price:(maxprice - (maxprice-minprice)/4*2)];
    [self drawHDash:CGPointMake(0, perheight * 3) width:_candlelayer.frame.size.width price:(maxprice - (maxprice-minprice)/4*3)];
    [self drawHDash:CGPointMake(0, perheight * 4) width:_candlelayer.frame.size.width price:(maxprice - (maxprice-minprice)/4*4)];
    
    //画竖分割虚线
    float perwidth = _candlelayer.frame.size.width/2;
//    [self drawVDash:CGPointMake(perwidth * 0, 0) height:_candlelayer.frame.size.height];
    [self drawVDash:CGPointMake(perwidth * 1, 0) height:_candlelayer.frame.size.height];
//    [self drawVDash:CGPointMake(perwidth * 2, 0) height:_candlelayer.frame.size.height];
    
    //画蜡烛图
    [self drawAllLine:points perWidth:per_candle_width maxVol:maxvol minVol:minvol maxPrice:maxprice minPrice:minprice];
    
    //画日期
    float perdate_width = self.frame.size.width / (_per*_level);

    CGRect rect = [self drawDate:firste.date?firste.date:firste.time point:CGPointMake(perdate_width * 0, 0)];
    if(![firste.date isEqualToString:laste.date]){
        float w = perdate_width * total;
        if ((rect.origin.x+rect.size.width) > perdate_width * total) {
            w = (rect.origin.x+rect.size.width)+5;
        }
        [self drawDate:laste.date?laste.date:laste.time point:CGPointMake(w , 0)];
    }
    if (_hasVol) {
        //画中部文字
        [self drawMiddleVol:laste];
        //画最大交易量文字
        [self drawHighVol:maxvol];
    }
    
    [self drawNewPrice];
}

-(NSArray*)avgFrom:(int)pos length:(int)len{//第一个是价格 ， 第二个是交易量
    float retPrice = 0;
    float retVol = 0;
    if (pos < _records.count && (pos + 1) >= len) {
        for (int i = 0; i < len ; i++) {
            ProductKChartRecordsEntity *entity = (ProductKChartRecordsEntity*)_records[pos-i];
            retPrice += [entity.New floatValue] ;
            if (_hasVol) {
                retVol += [entity.Volume floatValue] ;
            }
        }
    }
    return @[[NSNumber numberWithFloat:retPrice/len],[NSNumber numberWithFloat:retVol/len]];
}

/**
 绘制水平虚线
 */
-(void)drawHDash:(CGPoint)origin width:(CGFloat)w price:(float)price{
    
    UIBezierPath *path = [UIBezierPath bezierPath];
    [path moveToPoint:CGPointMake(0,0)];
    [path addLineToPoint:CGPointMake(w,0) ];
    
    CAShapeLayer *shapeLayer = [CAShapeLayer layer];
    shapeLayer.frame = CGRectMake(origin.x, origin.y, w, 1);
    [shapeLayer setFillColor:[[UIColor clearColor] CGColor]];
    // 设置虚线颜色为blackColor [shapeLayer setStrokeColor:[[UIColor blackColor] CGColor]];
    
    // 3.0f设置虚线的宽度 [shapeLayer setLineWidth:1.0f];
    [shapeLayer setLineJoin:kCALineJoinRound];
    // 1=线的宽度 1=每条线的间距
    [shapeLayer setLineDashPattern:[NSArray arrayWithObjects:[NSNumber numberWithInt:3],[NSNumber numberWithInt:3],nil]];
    shapeLayer.path = path.CGPath;
    
    CATextLayer* pricelayer = [CATextLayer layer];
    pricelayer.foregroundColor = [[UIColor blackColor] CGColor];
    
    pricelayer.string = [NSString stringWithFormat:([NSString stringWithFormat:@"%%.%df",_precision]),price];
    pricelayer.contentsScale = 2;
    pricelayer.fontSize = 10.f; //字体的大小
    pricelayer.alignmentMode = kCAAlignmentLeft;//字体的对齐方式
    
    if(origin.y-_labelHeight/2 < 0){
        pricelayer.frame =CGRectMake(origin.x+5, origin.y+5, _labelWidth, _labelHeight);
        [shapeLayer setStrokeColor:[UIColor clearColor].CGColor];
        
    }else if(origin.y+_labelHeight/2 > _candlelayer.frame.size.height){
        pricelayer.frame =CGRectMake(origin.x+5, origin.y-_labelHeight, _labelWidth, _labelHeight);
        [shapeLayer setStrokeColor:[UIColor clearColor].CGColor];
    }else{
        pricelayer.frame =CGRectMake(origin.x+5, origin.y-_labelHeight/2 , _labelWidth, _labelHeight);
        [shapeLayer setStrokeColor:GRAY_LINE_COLOR.CGColor];
    }
    
    [_layers addObject:pricelayer];
    [_layers addObject:shapeLayer];
    [_candlelayer addSublayer:shapeLayer];
    [_candlelayer addSublayer:pricelayer];
}


/**
 绘制竖直虚线
 */
-(void)drawVDash:(CGPoint)origin height:(CGFloat)h{
    
    UIBezierPath *path = [UIBezierPath bezierPath];
    [path moveToPoint:CGPointMake(0,0)];
    [path addLineToPoint:CGPointMake(0,h) ];
    
    CAShapeLayer *shapeLayer = [CAShapeLayer layer];
    shapeLayer.frame = CGRectMake(origin.x, origin.y, 1, h);
    [shapeLayer setFillColor:[[UIColor clearColor] CGColor]];
    // 设置虚线颜色为blackColor [shapeLayer setStrokeColor:[[UIColor blackColor] CGColor]];
    [shapeLayer setStrokeColor:GRAY_LINE_COLOR.CGColor];
    // 3.0f设置虚线的宽度 [shapeLayer setLineWidth:1.0f];
    [shapeLayer setLineJoin:kCALineJoinRound];
    // 1=线的宽度 1=每条线的间距
    [shapeLayer setLineDashPattern:[NSArray arrayWithObjects:[NSNumber numberWithInt:3],[NSNumber numberWithInt:3],nil]];
    shapeLayer.path = path.CGPath;
    
    [_layers addObject:shapeLayer];
    [_candlelayer addSublayer:shapeLayer];
    
}

/**
 计算交易量均值点
 */
-(void)drawAllLine:(NSMutableArray*)vols perWidth:(float)pw maxVol:(float)maxvol minVol:(float)minvol maxPrice:(float)maxprice minPrice:(float)minprice{
    
    UIBezierPath* ma5line = [UIBezierPath bezierPath];//5日均线
    UIBezierPath* ma10line = [UIBezierPath bezierPath];//10日均线
    UIBezierPath* ma20line = [UIBezierPath bezierPath];//20日均线
    UIBezierPath* ma60line = [UIBezierPath bezierPath];//60日均线
    UIBezierPath* vol5line = [UIBezierPath bezierPath];//交易量5日均线
    UIBezierPath* vol10line = [UIBezierPath bezierPath];//交易量10日均线
    if (maxvol == minvol) {
        minvol = 0;
    }
    float fPerVolHeight = _vollayer.frame.size.height/maxvol;
    if (maxprice<=minprice) {
        minprice=0;
    }
    float fPerPriceHeight = _candlelayer.frame.size.height/(maxprice-minprice);
    
    float fPerVolShapWidth = pw*0.9;
    float fPerPriceShapWidth = pw*0.7;
    float prevVol5 = 0;float prevVol10 = 0;
    float prevMA5 = 0;float prevMA10 = 0;float prevMA20 = 0;float prevMA60 = 0;
    for (int i =0; i<vols.count; ++i) {
        ProductKChartRecordsEntity *entity = (ProductKChartRecordsEntity*)vols[i];
        if(!(entity.YClose==entity.High && entity.YClose==entity.Low) && [entity.Low floatValue]>0){//去除无效点
            if (prevVol5 == 0) {
                if (entity.VOL5>0) {
                    [vol5line moveToPoint:CGPointMake(pw*i+pw/2, fPerVolHeight*(maxvol-entity.VOL5))];
                }
                prevVol5 = entity.VOL5;
            }else{
                [vol5line addLineToPoint:CGPointMake(pw*i+pw/2, fPerVolHeight*(maxvol-entity.VOL5))];
                [vol5line moveToPoint:CGPointMake(pw*i+pw/2, fPerVolHeight*(maxvol-entity.VOL5))];
            }
            
            
            if (prevVol10 == 0) {
                if (entity.VOL10>0) {
                    [vol10line moveToPoint:CGPointMake(pw*i+pw/2, fPerVolHeight*(maxvol-entity.VOL10))];
                }
                prevVol10 = entity.VOL10;
            }else{
                [vol10line addLineToPoint:CGPointMake(pw*i+pw/2, fPerVolHeight*(maxvol-entity.VOL10))];
            }
            
            if (prevMA5 == 0 ) {
                if (entity.MA5>0) {
                    [ma5line moveToPoint:CGPointMake(pw*i+pw/2, fPerPriceHeight*(maxprice-entity.MA5))];
                }
                prevMA5 = entity.MA5;
            }else{
                [ma5line addLineToPoint:CGPointMake(pw*i+pw/2, fPerPriceHeight*(maxprice-entity.MA5))];
            }
            
            if (prevMA10==0) {
                if (entity.MA10>0) {
                    [ma10line moveToPoint:CGPointMake(pw*i+pw/2, fPerPriceHeight*(maxprice-entity.MA10))];
                }
                prevMA10 = entity.MA10;
            }else{
                [ma10line addLineToPoint:CGPointMake(pw*i+pw/2, fPerPriceHeight*(maxprice-entity.MA10))];
            }
            
            if (prevMA20==0) {
                if (entity.MA20>0) {
                    [ma20line moveToPoint:CGPointMake(pw*i+pw/2, fPerPriceHeight*(maxprice-entity.MA20))];
                }
                prevMA20 = entity.MA20;
            }else{
                [ma20line addLineToPoint:CGPointMake(pw*i+pw/2, fPerPriceHeight*(maxprice-entity.MA20))];
            }
            
            if (prevMA60==0) {
                if (entity.MA60>0) {
                    [ma60line moveToPoint:CGPointMake(pw*i+pw/2, fPerPriceHeight*(maxprice-entity.MA60))];
                }
                prevMA60 = entity.MA60;
            }else{
                [ma60line addLineToPoint:CGPointMake(pw*i+pw/2, fPerPriceHeight*(maxprice-entity.MA60))];
            }
            
            CGColorRef color = nil;
            if([entity.Open floatValue]<=[entity.New floatValue]){
                color = Color_Up_Red.CGColor;
            }else{
                color = Color_Down_Green.CGColor;
            }
            
            if (_hasVol) {
                CAShapeLayer *vollayer = [CAShapeLayer layer];
                
                vollayer.backgroundColor = color;
                if([entity.Volume floatValue]>0){
                    float h = fPerVolHeight * ( maxvol - [entity.Volume floatValue] );
                    vollayer.frame = CGRectMake(pw*i,h+fPerVolHeight/2,fPerVolShapWidth,_vollayer.frame.size.height-h);
                }
                
                [_layers addObject:vollayer];
                [_vollayer addSublayer:vollayer];
            }
            
            
            CAShapeLayer *pricelayer = [CAShapeLayer layer];
            pricelayer.backgroundColor = color;
            
            float phy = fPerPriceHeight * ( maxprice - [entity.Open floatValue]);
            float phn = fPerPriceHeight * ( maxprice - [entity.New floatValue]);
            pricelayer.frame = CGRectMake(pw*i+pw/2-fPerPriceShapWidth/2,(phy<phn?phy:phn),fPerPriceShapWidth,fabs(phn-phy)>1?fabs(phn-phy):1);
            [_layers addObject:pricelayer];
            [_candlelayer addSublayer:pricelayer];
            
            
            float phh = fPerPriceHeight * ( maxprice - [entity.High floatValue] );
            float phl = fPerPriceHeight * ( maxprice - [entity.Low floatValue] );
            CAShapeLayer* pricelinelayer = [CAShapeLayer layer];
            pricelinelayer.frame = CGRectMake(pw*i+pw/2-0.5,phh,1,fabs(phh-phl));
            pricelinelayer.backgroundColor = color;
            [_layers addObject:pricelinelayer];
            [_candlelayer addSublayer:pricelinelayer];
        }
    }
    
    [self drawAvgLine:vol5line.CGPath lineColor:FIVE_LINE_COLOR.CGColor parentLayer:_vollayer];
    [self drawAvgLine:vol10line.CGPath lineColor:TEN_LINE_COLOR.CGColor parentLayer:_vollayer];
    
    [self drawAvgLine:ma5line.CGPath lineColor:FIVE_LINE_COLOR.CGColor parentLayer:_candlelayer];
    [self drawAvgLine:ma10line.CGPath lineColor:TEN_LINE_COLOR.CGColor parentLayer:_candlelayer];
    [self drawAvgLine:ma20line.CGPath lineColor:TWENTY_LINE_COLOR.CGColor parentLayer:_candlelayer];
    [self drawAvgLine:ma60line.CGPath lineColor:SIXTY_LINE_COLOR.CGColor parentLayer:_candlelayer];
    
}

-(void)drawAvgLine:(CGPathRef)path lineColor:(CGColorRef)color parentLayer:(CAShapeLayer*)layer{
    
    CAShapeLayer* malayer = [CAShapeLayer layer];
    malayer.path = path;
    malayer.strokeColor = color;
    malayer.fillColor = [UIColor clearColor].CGColor;
    malayer.lineJoin = kCALineJoinRound;
    malayer.lineCap = kCALineCapRound;
    [_layers addObject:malayer];
    [layer addSublayer:malayer];
}

/**
 绘制中部文字
 */
-(void)drawMiddleVol:(ProductKChartRecordsEntity*)entity{
    float vol_width = 37;
    
    
    CATextLayer* vollabel = [CATextLayer layer];
    vollabel.foregroundColor = [[UIColor blackColor] CGColor];
    vollabel.backgroundColor = [GRAY_LINE_COLOR CGColor];
    vollabel.frame =CGRectMake(0, 2 , vol_width, _labelHeight-3);
    vollabel.alignmentMode = kCAAlignmentCenter;//字体的对齐方式
    vollabel.string = @"V O L";
    vollabel.contentsScale = 2;
    vollabel.fontSize = 10.f; //字体的大小
    
    [_layers addObject:vollabel];
    [_volMAlabellayer addSublayer:vollabel];
    
    CATextLayer* layervol = [CATextLayer layer];
    
    float vol = [entity.Volume floatValue];
//    if (_isStock) {
//        vol = vol/100;
//    }
    layervol.string = [NSString stringWithFormat:@"%.1f万",  vol/10000 ];
    layervol.contentsScale = 2;
    layervol.foregroundColor = FIVE_LINE_COLOR.CGColor ;
    layervol.fontSize = 10.f; //字体的大小
    layervol.alignmentMode = kCAAlignmentLeft;//字体的对齐方式
    CGRect size = [layervol.string boundingRectWithSize:CGSizeMake(1000,100 ) options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:10]} context:nil];
    layervol.frame = CGRectMake(vollabel.frame.origin.x+vol_width+8, 2, size.size.width , _labelHeight-3);
    [_layers addObject:layervol];
    [_volMAlabellayer addSublayer:layervol];
    
    CATextLayer* layer5 = [CATextLayer layer];
    if (entity.VOL5>0) {
        [_layers addObject:layer5];
        [_volMAlabellayer addSublayer:layer5];
        float vol5 = entity.VOL5;
//        if (_isStock) {
//            vol5 = vol5/100;
//        }
        if(vol5>10000){
            layer5.string = [NSString stringWithFormat:@"MA5: %ld万",(long)[[NSNumber numberWithFloat: vol5/10000] integerValue]];
        }else{
            layer5.string = [NSString stringWithFormat:@"MA5: %ld",(long)[[NSNumber numberWithFloat: vol5] integerValue]];
        }
        layer5.contentsScale = 2;
        layer5.foregroundColor = FIVE_LINE_COLOR.CGColor ;
        layer5.fontSize = 10.f; //字体的大小
        layer5.alignmentMode = kCAAlignmentLeft;//字体的对齐方式
        CGRect size = [layer5.string boundingRectWithSize:CGSizeMake(1000,100 ) options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:10]} context:nil];
        layer5.frame = CGRectMake(layervol.frame.origin.x+vol_width+8, 2, size.size.width , _labelHeight-3);
    }
    CATextLayer* layer10 = [CATextLayer layer];
    
    if (entity.VOL10>0) {
        [_layers addObject:layer10];
        [_volMAlabellayer addSublayer:layer10];
        float vol10 = entity.VOL10;
//        if (_isStock) {
//            vol10 = vol10/100;
//        }
        if(entity.VOL10>10000){
            layer10.string = [NSString stringWithFormat:@"MA10: %ld万",(long)[[NSNumber numberWithFloat: vol10/10000] integerValue]];
        }else{
            layer10.string = [NSString stringWithFormat:@"MA10: %ld",(long)[[NSNumber numberWithFloat: vol10] integerValue]];
        }
        layer10.contentsScale = 2;
        layer10.foregroundColor = TEN_LINE_COLOR.CGColor ;
        layer10.fontSize = 10.f; //字体的大小
        layer10.alignmentMode = kCAAlignmentLeft;//字体的对齐方式
        CGRect size = [layer10.string boundingRectWithSize:CGSizeMake(1000,100 ) options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:10]} context:nil];
        layer10.frame = CGRectMake(layer5.frame.origin.x+layer5.frame.size.width+8, 2, size.size.width, _labelHeight-3);
    }
}

/**
 绘制最大交易量文字
 */
-(void)drawHighVol:(float)vol{
    
    CATextLayer* vollabel = [CATextLayer layer];
    vollabel.foregroundColor = [[UIColor blackColor] CGColor];
//    if (_isStock) {
//        vol = vol/100;
//    }
    vollabel.alignmentMode = kCAAlignmentCenter;//字体的对齐方式
    if(vol>10000){
        vollabel.string = [NSString stringWithFormat:@"%ld万",(long)[[NSNumber numberWithFloat: vol/10000] integerValue]];
    }else{
        vollabel.string = [NSString stringWithFormat:@"%ld",(long)[[NSNumber numberWithFloat: vol] integerValue]];
    }
    CGRect size = [vollabel.string boundingRectWithSize:CGSizeMake(1000,100 ) options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:10]} context:nil];
    vollabel.frame =CGRectMake(5, 5 , size.size.width , _labelHeight);
    vollabel.contentsScale = 2;
    vollabel.fontSize = 10.f; //字体的大小
    
    [_layers addObject:vollabel];
    [_vollayer addSublayer:vollabel];
}

/**
 绘制日期
 */
-(CGRect)drawDate:(NSString*)datestr point:(CGPoint)origin{
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setDateFormat:@"yyyyMMdd"];
    NSDate *date = [dateFormatter dateFromString:datestr];
    [dateFormatter setDateFormat:@"yyyy.MM.dd"];
    CATextLayer* datelayer = [CATextLayer layer];
    datelayer.foregroundColor = [[UIColor blackColor] CGColor];
    if(datestr){
        datelayer.string = [NSString stringWithFormat:@"%@",datestr];
    }else{
        datelayer.string = [NSString stringWithFormat:@"%@",[dateFormatter stringFromDate:date]];
    }
    
    CGRect dateSize = [datelayer.string boundingRectWithSize:CGSizeMake(1000,100 ) options:NSStringDrawingUsesLineFragmentOrigin attributes:@{NSFontAttributeName:[UIFont systemFontOfSize:10]} context:nil];
    if(origin.x-dateSize.size.width < 0){
        datelayer.frame =CGRectMake(origin.x, origin.y , dateSize.size.width, dateSize.size.height);
        datelayer.alignmentMode = kCAAlignmentLeft;//字体的对齐方式
    }else if(origin.x+dateSize.size.width > _timelabellayer.frame.size.width ){
        datelayer.frame =CGRectMake(_timelabellayer.frame.size.width-dateSize.size.width, origin.y, dateSize.size.width, dateSize.size.height);
        
        datelayer.alignmentMode = kCAAlignmentRight;//字体的对齐方式
    }else{
        datelayer.frame =CGRectMake(origin.x, origin.y, dateSize.size.width, dateSize.size.height);
        datelayer.alignmentMode = kCAAlignmentCenter;//字体的对齐方式
    }
    
    datelayer.contentsScale = 2;
    datelayer.fontSize = 10.f; //字体的大小
    
    [_layers addObject:datelayer];
    
    [_timelabellayer addSublayer:datelayer];
    return datelayer.frame;
}

//绘制最新价
-(void)drawNewPrice:(ProductPanKouEntity*)newPrice{
    if (newPrice) {
        _newPrice = newPrice;
        [self drawKChart];
    }
}

-(void)drawNewPrice{

    [_newPricelayer removeFromSuperlayer];
    float pointY =   (_maxPrice - [_newPrice.New floatValue])/(_maxPrice - _minPrice)*_candlelayer.frame.size.height;
    if (pointY>=0 && pointY <= _candlelayer.frame.size.height) {
        CGPoint point = CGPointMake(0, pointY);
        
        if (_newPricelayer==nil) {
            
            _newPricelayer = [CALayer layer];
            
            _newPricelayer.frame = CGRectMake(_candlelayer.frame.origin.x,point.y-7.5,_candlelayer.frame.size.width,15);
            _newPriceLinelayer = [CALayer layer];

            _newPriceLinelayer.frame = CGRectMake(0,_newPricelayer.frame.size.height/2,_newPricelayer.frame.size.width,1);
            [_newPricelayer addSublayer:_newPriceLinelayer];
            _newPriceRectlayer = [CALayer layer];
            _newPriceRectlayer.frame = CGRectMake(_candlelayer.frame.size.width/2 - 30,0,60,_newPricelayer.frame.size.height);
            
            _newPriceTextlayer = [CATextLayer layer];
            
            _newPriceTextlayer.contentsScale = 2;
            _newPriceTextlayer.foregroundColor = [UIColor whiteColor].CGColor ;
            _newPriceTextlayer.fontSize = 12.f; //字体的大小
            _newPriceTextlayer.alignmentMode = kCAAlignmentCenter;//字体的对齐方式
            _newPriceTextlayer.frame = _newPriceRectlayer.bounds;
            [_newPriceRectlayer addSublayer:_newPriceTextlayer];
            [_newPricelayer addSublayer:_newPriceRectlayer];
            
        }
        UIColor *color = [AppUtil colorWithOpen:[_newPrice.Open floatValue] andNew:[_newPrice.New floatValue]];
        _newPriceLinelayer.backgroundColor = color.CGColor;
        _newPriceRectlayer.backgroundColor = color.CGColor;
        [_candlelayer addSublayer:_newPricelayer];
        [CATransaction begin];
        ///关闭隐式动画
        [CATransaction setDisableActions:YES];
        _newPriceTextlayer.string = [NSString stringWithFormat:([NSString stringWithFormat:@"%%.%df",_precision]),[_newPrice.New floatValue]];
        _newPricelayer.frame = CGRectMake(_candlelayer.frame.origin.x,point.y-7.5,_candlelayer.frame.size.width,15);
        [CATransaction commit];
        
    }

}

@end
