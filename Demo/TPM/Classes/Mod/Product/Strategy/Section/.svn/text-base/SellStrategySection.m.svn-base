//
//  SellStrategySection.m
//  TPM
//
//  Created by admin on 16/7/26.
//  Copyright © 2016年 JYZD. All rights reserved.
//

#import "SellStrategySection.h"


@implementation SellStrategySection

/*
// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect {
    // Drawing code
}
*/

@end





@interface SellStrategyHeadSection ()

@property (nonatomic, strong) CAShapeLayer *trackLayer;
@property (nonatomic, strong) CAShapeLayer *progressLayer;
@property (nonatomic, strong) CAGradientLayer *gradientLayer;
@property (nonatomic, strong) UIColor *trackColor;
@property (nonatomic, strong) UIColor *progressColor;
@property (nonatomic, assign) CGFloat lineWidth;
@property (nonatomic, assign) CGFloat percent;
@property (nonatomic, assign) CGFloat pathWidth;
@property (nonatomic, strong) UIBezierPath *path;
@property (nonatomic, strong) UIImageView *shawdowImageView;

@end

@implementation SellStrategyHeadSection

- (void)awakeFromNib
{
    [self updateUI];
    [super awakeFromNib];
    
}

- (void)updateUI
{
    self.trackColor = [UIColor colorWithRed:255 green:255 blue:255 alpha:0.2];
    self.progressColor = [UIColor whiteColor];
    self.pathWidth = self.backView.bounds.size.width / 1;
    
    [self trackLayer];
    [self gradientLayer];
    
}

- (void)updatePercent:(CGFloat)percent
{
    self.percent = percent;
    [self.progressLayer removeAllAnimations];
    
    [CATransaction begin];
    [CATransaction setDisableActions:YES];
    [CATransaction setAnimationTimingFunction:[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn]];
    [CATransaction setAnimationDuration:1];
    
    self.progressLayer.strokeEnd = self.percent / 100.0;
    
    [CATransaction commit];
}


#pragma mark - Load
- (void)loadLayer:(CAShapeLayer *)layer WithColor:(UIColor *)color
{
    CGFloat layerWidth = self.pathWidth;
    CGFloat layerX = (self.backView.bounds.size.width - layerWidth) / 2;
    layer.frame = CGRectMake(layerX, layerX, layerWidth, layerWidth);
    layer.fillColor = [UIColor clearColor].CGColor;
    layer.strokeColor = color.CGColor;
    layer.lineCap = kCALineCapRound;
    layer.lineWidth = self.lineWidth;
    layer.path = self.path.CGPath;
}



#pragma mark - Getters & Setters

- (UIImageView *)shadowImageView {
    if (!_shawdowImageView) {
        _shawdowImageView = [[UIImageView alloc]initWithFrame:self.backView.bounds];
        _shawdowImageView.image = [UIImage imageNamed:@"shadow"];
        [self.backView addSubview:_shawdowImageView];
    }
    return _shawdowImageView;
}


-(CAShapeLayer *)trackLayer
{
    if (!_trackLayer) {
        
        _trackLayer = [CAShapeLayer layer];
        [self loadLayer:_trackLayer WithColor:self.trackColor];
        [self.backView.layer addSublayer:_trackLayer];
    }
    
    return _trackLayer;
}

-(CAShapeLayer *)progressLayer
{
    if (!_progressLayer) {
        _progressLayer = [CAShapeLayer layer];
        [self loadLayer:_progressLayer WithColor:self.progressColor];
        _progressLayer.strokeEnd = 0;
        
    }
    return _progressLayer;
}

-(CAGradientLayer *)gradientLayer
{
    if (!_gradientLayer) {
        _gradientLayer = [CAGradientLayer layer];
        _gradientLayer.frame = self.backView.bounds;
        _gradientLayer.colors = @[(id)[UIColor whiteColor].CGColor,
                                  (id)[UIColor colorWithRed:1 green:1 blue:1 alpha:1.000].CGColor];
        [_gradientLayer setStartPoint:CGPointMake(0.5, 1.0)];
        [_gradientLayer setEndPoint:CGPointMake(0.5, 0.0)];
        
        [_gradientLayer setMask:self.progressLayer];
        [self.backView.layer addSublayer:_gradientLayer];
    }
    
    return _gradientLayer;
}

- (void)setPercent:(CGFloat)percent {
    _percent = percent;
    _percent = _percent > 100 ? 100 : _percent;
    _percent = _percent < 0 ? 0 : _percent;
}

- (UIBezierPath *)path {
    if (!_path) {
        
        CGFloat halfWidth = self.pathWidth / 2;
        _path = [UIBezierPath bezierPathWithArcCenter:CGPointMake(halfWidth, halfWidth)
                                               radius:(self.pathWidth - self.lineWidth)/2
                                           startAngle:-M_PI/2
                                             endAngle:M_PI * 3 / 2
                                            clockwise:YES];
    }
    return _path;
}

- (CGFloat)lineWidth {
    if (_lineWidth == 0) {
        _lineWidth = 6;
    }
    return _lineWidth;
}



@end


@implementation SellStrategyMiddleSection



@end




@implementation SellStrategyChooseSection

-(void)awakeFromNib
{
    [super awakeFromNib];
    
    self.textFieldView.layer.borderWidth = 1;
    self.textFieldView.layer.borderColor = [UIColor grayColor].CGColor;
    self.textFieldView.layer.cornerRadius = 3;
    self.textFieldView.layer.masksToBounds = YES;
    
}

-(void)sectionDidLoad
{
    [super sectionDidLoad];
    
    self.inputFundTextField.delegate = self;
    
    if ([self.inputFundTextField isFirstResponder]) {
        
        [self.inputFundTextField resignFirstResponder];
    }
}



#pragma mark - STOKeyBoradDelegate

-(void)confirmFunc{
    [self.keyBoard filterNumber];
    
    [self.keyBoard btnClose:nil];
    [[NSNotificationCenter defaultCenter] postNotificationName:kSellKeyBoardConfirm object:nil];
    
}

-(void)closeFunc{
    [self animateTextField:nil up:NO];
}

-(void)textChangeTo:(NSString *)text
{
    [self changeChoseBtn:nil];
}
-(void)textHasChanged{
    [self checkConfirm];
}

-(void)rightFunc
{
    [self.keyBoard closeKeyBoard];
    [[NSNotificationCenter defaultCenter] postNotificationName:kSellKeyBoardChoseAll object:nil];
}

#pragma mark - UITextFieldDelegate


-(BOOL)textFieldShouldBeginEditing:(UITextField *)textField{
    UIColor *blue=[UIColor colorWithRed:20.0/255.0 green:128.0/255.0 blue:250.0/255.0 alpha:1.0];
    self.keyBoard=[STOKeyBoard keyBoardForTextField:self.inputFundTextField];
    self.keyBoard.keyBoardDelegate=self;
    [self.keyBoard.btnLeft setTitle:@"0" forState:UIControlStateNormal];
    [self.keyBoard.btnLeft setTitleColor:blue forState:UIControlStateNormal];
    
    [self.keyBoard.btnRight setTitle:@"全额" forState:UIControlStateNormal];
    
    [self.keyBoard.btnConfirm setTitle:@"确认" forState:UIControlStateNormal];

    [self.keyBoard filterNumber];
    
    [self checkConfirm];
    [self animateTextField:nil up:YES];
    
    UIWindow *window = [[[UIApplication sharedApplication] windows] objectAtIndex:0];
    [window addSubview:self.keyBoard];
    
    
    return NO;
}

-(void)checkConfirm{
    [self setBtn:self.keyBoard.btnConfirm enabled:(self.inputFundTextField.text.integerValue>0)];
}


#pragma mark - private
- (void) animateTextField: (UITextField*) textField up: (BOOL) up
{
    const int movementDistance = 155; // tweak as needed
    const float movementDuration = 0.3f; // tweak as needed
    int movement = (up ? -movementDistance : movementDistance);
    [UIView beginAnimations: @"anim" context: nil];
    [UIView setAnimationBeginsFromCurrentState: YES];
    [UIView setAnimationDuration: movementDuration];
    self.controller.view.frame = CGRectOffset(self.controller.view.frame, 0, movement);
    if (!up) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kSellKeyBoardHide object:nil];
    }

    [UIView commitAnimations];
}

-(void)setBtn:(UIButton *)btn enabled:(BOOL)enable{
    if (enable) {

        [btn setBackgroundColor:kBtnColor];
        [btn setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [btn setEnabled:YES];
    }else{

        [btn setBackgroundColor:kBtnDisableColor];
        [btn setTitleColor:kBtnTextDisableColor forState:UIControlStateDisabled];
        [btn setEnabled:NO];
    }
}


-(void)changeChoseBtn:(UIButton *)btn{
    for (UIButton *button in self.buttonsView.subviews) {
        button.selected = NO;
    }
    btn.selected = !btn.selected;
}

-(void)disableChoseBtn:(UIButton *)btn{

    [btn setBackgroundColor:kBtnDisableColor];
    [btn setTitleColor:kBtnTextDisableColor forState:UIControlStateNormal];
    btn.enabled = NO;
}

-(void)enableChoseBtn:(UIButton *)btn{

    [btn setBackgroundColor:kBtnColor];
    [btn setTitleColor:kBtnChooseTextColor forState:UIControlStateNormal];
    btn.enabled = YES;
}

@end








