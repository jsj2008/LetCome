//
//  InformDetailSection.m
//  TPM
//
//  Created by admin on 16/8/1.
//  Copyright © 2016年 JYZD. All rights reserved.
//

#import "InformDetailSection.h"

@implementation InformDetailSection

/*
// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect {
    // Drawing code
}
*/

@end

@interface InformDetailHeadSection ()

@property (nonatomic, strong) CAShapeLayer *trackLayer;
@property (nonatomic, strong) CAShapeLayer *progressLayer;
@property (nonatomic, strong) CAGradientLayer *gradientLayer;
@property (nonatomic, strong) UIColor *trackColor;
@property (nonatomic, strong) UIColor *progressColor;
@property (nonatomic, assign) CGFloat lineWidth;
@property (nonatomic, assign) CGFloat percent;
@property (nonatomic, assign) CGFloat pathWidth;
@property (nonatomic, strong) UIBezierPath *path;
@property (nonatomic, strong) UIImageView *shawdowImageView;

@property (nonatomic, assign) CGFloat profitPercent;
@property (nonatomic, strong) CAShapeLayer *profitTrackLayer;
@property (nonatomic, strong) CAShapeLayer *profitProgressLayer;
@property (nonatomic, strong) CAGradientLayer *profitGradientLayer;

@end

@implementation InformDetailHeadSection

- (void)awakeFromNib
{
    [self updateUI];
    [super awakeFromNib];
    
}

- (void)updateUI
{
    self.trackColor = [UIColor colorWithRed:255 green:255 blue:255 alpha:0.2];
    self.progressColor = [UIColor whiteColor];
    self.pathWidth = self.timeView.bounds.size.width / 1;
    
    [self trackLayer];
    [self gradientLayer];
    
    [self profitTrackLayer];
    [self profitGradientLayer];
}

- (void)updatePercent:(CGFloat)percent
{
    self.percent = percent;
    [self.progressLayer removeAllAnimations];
    
    [CATransaction begin];
    [CATransaction setDisableActions:YES];
    [CATransaction setAnimationTimingFunction:[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn]];
    [CATransaction setAnimationDuration:1];
    
    self.progressLayer.strokeEnd = self.percent / 100.0;
    
    [CATransaction commit];
}

- (void)updateProfitPercent:(CGFloat)percent
{
    self.profitPercent = percent;
    [self.profitProgressLayer removeAllAnimations];
    
    [CATransaction begin];
    [CATransaction setDisableActions:YES];
    [CATransaction setAnimationTimingFunction:[CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn]];
    [CATransaction setAnimationDuration:1];
    
    self.profitProgressLayer.strokeEnd = self.profitPercent / 100.0;
    
    [CATransaction commit];
}


#pragma mark - Load
- (void)loadLayer:(CAShapeLayer *)layer WithColor:(UIColor *)color
{
    CGFloat layerWidth = self.pathWidth;
    CGFloat layerX = (self.timeView.bounds.size.width - layerWidth) / 2;
    layer.frame = CGRectMake(layerX, layerX, layerWidth, layerWidth);
    layer.fillColor = [UIColor clearColor].CGColor;
    layer.strokeColor = color.CGColor;
    layer.lineCap = kCALineCapRound;
    layer.lineWidth = self.lineWidth;
    layer.path = self.path.CGPath;
}



#pragma mark - Getters & Setters

- (UIImageView *)shadowImageView {
    if (!_shawdowImageView) {
        _shawdowImageView = [[UIImageView alloc]initWithFrame:self.timeView.bounds];
        _shawdowImageView.image = [UIImage imageNamed:@"shadow"];
        [self.timeView addSubview:_shawdowImageView];
        [self.profitView addSubview:_shawdowImageView];
    }
    return _shawdowImageView;
}


-(CAShapeLayer *)trackLayer
{
    if (!_trackLayer) {
        
        _trackLayer = [CAShapeLayer layer];
        [self loadLayer:_trackLayer WithColor:self.trackColor];
        [self.timeView.layer addSublayer:_trackLayer];
        
    }
    
    return _trackLayer;
}

-(CAShapeLayer *)profitTrackLayer
{
    if (!_profitTrackLayer) {
        
        _profitTrackLayer = [CAShapeLayer layer];
        [self loadLayer:_profitTrackLayer WithColor:self.trackColor];
        [self.profitView.layer addSublayer:_profitTrackLayer];
    }
    return _profitTrackLayer;
}

-(CAShapeLayer *)progressLayer
{
    if (!_progressLayer) {
        _progressLayer = [CAShapeLayer layer];
        [self loadLayer:_progressLayer WithColor:self.progressColor];
        _progressLayer.strokeEnd = 0;
        
    }
    return _progressLayer;
}

-(CAShapeLayer *)profitProgressLayer
{
    if (!_profitProgressLayer) {
        
        _profitProgressLayer = [CAShapeLayer layer];
        [self loadLayer:_profitProgressLayer WithColor:self.progressColor];
        _profitProgressLayer.strokeEnd = 0;
    }
    return _profitProgressLayer;
}


-(CAGradientLayer *)gradientLayer
{
    if (!_gradientLayer) {
        _gradientLayer = [CAGradientLayer layer];
        _gradientLayer.frame = self.timeView.bounds;
        _gradientLayer.colors = @[(id)[UIColor whiteColor].CGColor,
                                  (id)[UIColor colorWithRed:1 green:1 blue:1 alpha:1.000].CGColor];
        [_gradientLayer setStartPoint:CGPointMake(0.5, 1.0)];
        [_gradientLayer setEndPoint:CGPointMake(0.5, 0.0)];
        
        [_gradientLayer setMask:self.progressLayer];
        [self.timeView.layer addSublayer:_gradientLayer];
        //[self.profitView.layer addSublayer:_gradientLayer];
    }
    
    return _gradientLayer;
}

-(CAGradientLayer *)profitGradientLayer
{
    if (!_profitGradientLayer) {
        _profitGradientLayer = [CAGradientLayer layer];
        _profitGradientLayer.frame = self.timeView.bounds;
        _profitGradientLayer.colors = @[(id)[UIColor whiteColor].CGColor,
                                  (id)[UIColor colorWithRed:1 green:1 blue:1 alpha:1.000].CGColor];
        [_profitGradientLayer setStartPoint:CGPointMake(0.5, 1.0)];
        [_profitGradientLayer setEndPoint:CGPointMake(0.5, 0.0)];
        
        [_profitGradientLayer setMask:self.profitProgressLayer];
        [self.profitView.layer addSublayer:_profitGradientLayer];
    }
    
    return _profitGradientLayer;

}


- (void)setPercent:(CGFloat)percent {
    _percent = percent;
    _percent = _percent > 100 ? 100 : _percent;
    _percent = _percent < 0 ? 0 : _percent;
}

- (UIBezierPath *)path {
    if (!_path) {
        
        CGFloat halfWidth = self.pathWidth / 2;
        _path = [UIBezierPath bezierPathWithArcCenter:CGPointMake(halfWidth, halfWidth)
                                               radius:(self.pathWidth - self.lineWidth)/2
                                           startAngle:-M_PI/2
                                             endAngle:M_PI * 3 / 2
                                            clockwise:YES];
    }
    return _path;
}

- (CGFloat)lineWidth {
    if (_lineWidth == 0) {
        _lineWidth = 6;
    }
    return _lineWidth;
}


@end




@implementation InformDetailTimeSection


@end


@implementation InformDetailTipSection



@end
