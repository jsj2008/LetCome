//
//  BuildRepositoryStrategyBll.m
//  TPM
//
//  Created by admin on 16/7/28.
//  Copyright © 2016年 JYZD. All rights reserved.
//

#define LastAlert 100
#define kAlertError 200
#define KLastBuildSuccess 300
#define KBuildFailed 400

#define kBuildOrderProfitKey @"kBuildOrderProfitKey"
#define kBuildOrderProfitVal 3


#import "BuildRepositoryStrategyBll.h"
#import "BuildStrategySection.h"
#import "BuildStrategyViewController.h"
#import "PreBuyCheckEntity.h"
#import "BuyOrderEntity.h"
#import "BuyStatusEntity.h"

@interface BuildRepositoryStrategyBll ()<UIAlertViewDelegate>


@property (nonatomic, strong) BuildStrategyChooseSesction *chooseSection;

@property (nonatomic, strong) NSTimer *resultTimer;
@property (nonatomic, strong) BuyOrderEntity *orderEntity;
@property (nonatomic, assign) NSInteger cutdownTime;

@end

@implementation BuildRepositoryStrategyBll

+(instancetype)bllWithController:(MyViewController *)controller tableView:(QUTableView *)tableview entity:(BuyingListRecordsEntity *)entity
{
    BuildRepositoryStrategyBll *bll = [super bllWithController:controller tableView:tableview];
    bll.entity = entity;
    
    return bll;
}

-(void)loadBll
{
    [super loadBll];
    
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(chooseAllBtn) name:KBuildKeyBoardChooseAll object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoardConfirm) name:KBuildKeyBoardConfirm object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoardHide) name:KBuildKeyBOardHide object:nil];
    
}

-(void)initQuickUI:(QUTableView *)tableView
{
    self.pAdaptor = [QUFlatAdaptor adaptorWithTableView:tableView nibArray:@[@"BuildStrategySection"] delegate:self];
    
    [self.pAdaptor.pSources addEntity:[QUEntity entity] withSection:[BuildStrategyHeadSection class]];
    [self.pAdaptor.pSources addEntity:[QUEntity entity] withSection:[BuildStrategyMiddleSection class]];
    [self.pAdaptor.pSources addEntity:[QUEntity entity] withSection:[BuildStrategyChooseSesction class]];
}

-(void)QUAdaptor:(QUAdaptor *)adaptor willDidLoadSection:(QUSection *)section willDidLoadEntity:(QUEntity *)entity
{
    if ([section isKindOfClass:[BuildStrategyChooseSesction class]]) {
        BuildStrategyChooseSesction *s = (BuildStrategyChooseSesction *)section;
        self.chooseSection = s;
        s.bll = self;
        
        [s.allBtn addTarget:self action:@selector(chooseBtnClicked:) forControlEvents:UIControlEventTouchUpInside];
        [s.halfBtn addTarget:self action:@selector(chooseBtnClicked:) forControlEvents:UIControlEventTouchUpInside];
        [s.oneThirdBtn addTarget:self action:@selector(chooseBtnClicked:) forControlEvents:UIControlEventTouchUpInside];
        [s.oneForthBtn addTarget:self action:@selector(chooseBtnClicked:) forControlEvents:UIControlEventTouchUpInside];
        [s.oneFifthBtn addTarget:self action:@selector(chooseBtnClicked:) forControlEvents:UIControlEventTouchUpInside];
    }
}


-(void)QUAdaptor:(QUAdaptor *)adaptor forSection:(QUSection *)section forEntity:(QUEntity *)entity
{
    if ([section isKindOfClass:[BuildStrategyHeadSection class]]) {
        
        BuildStrategyHeadSection *s = (BuildStrategyHeadSection *)section;
        //投资人
        s.inverstorLabel.text = self.entity.dealer_replace;
        //投资单元
        s.investUnitLabel.text = [NSString stringWithFormat:@"投资单元 %@万", self.entity.fund];
        //
        s.stockNameLabel.text = self.entity.stock_name;
        s.amountLabel.text = self.entity.times;
                //更新进度条
        [s updatePercent:self.entity.times.floatValue / 5 * 100];
    }
    
    if ([section isKindOfClass:[BuildStrategyMiddleSection class]]) {
        
        BuildStrategyMiddleSection *s = (BuildStrategyMiddleSection *)section;
        //待买金额
        NSLog(@"%@", [self changeMoneyFormat:self.entity.left_fund]);
        s.waitingBuyLabel.text = [self changeMoneyFormat:self.entity.left_fund];

    }
    
    
    if ([section isKindOfClass:[BuildStrategyChooseSesction class]]) {
        
        BuildStrategyChooseSesction *s = (BuildStrategyChooseSesction *)section;
        //现价
        if (self.entity.profitEntity) {
            
           s.curPriceLabel.text = self.entity.profitEntity.cur_price;
        }
    
        s.controller = self.controller;
    }
}

#pragma mark - 按钮

- (void)chooseAllBtn
{
    [self chooseBtnClicked:self.chooseSection.allBtn];
}

- (void)chooseBtnClicked:(UIButton *)btn
{
    float leftFund = self.entity.left_fund.floatValue;
    
    for (UIButton *button in self.chooseSection.buttonsView.subviews) {
        
        button.selected = NO;
    }
    btn.selected = !btn.selected;
    
    if ([btn.titleLabel.text isEqualToString:@"全部"]) {
        
        self.chooseSection.inputFundTextField.text = [NSString stringWithFormat:@"%.2f", leftFund];
        
    }else if ([btn.titleLabel.text isEqualToString:@"1/2"]){
        
        float fund = leftFund * 1/2;
        self.chooseSection.inputFundTextField.text = [NSString stringWithFormat:@"%.2f", fund];
        
    }else if ([btn.titleLabel.text isEqualToString:@"1/3"]){
        float fund = leftFund * 1/3;
        self.chooseSection.inputFundTextField.text = [NSString stringWithFormat:@"%.2f", fund];
        
    }else if ([btn.titleLabel.text isEqualToString:@"1/4"]){
        float fund = leftFund * 1/4;
        self.chooseSection.inputFundTextField.text = [NSString stringWithFormat:@"%.2f", fund];
    }else if([btn.titleLabel.text isEqualToString:@"1/5"]){
        float fund = leftFund * 1/5;
        self.chooseSection.inputFundTextField.text = [NSString stringWithFormat:@"%.2f", fund];
        
    }
    //点击按钮确定
    [((BuildStrategyViewController *)self.controller) enableConfirmBtn];
    
    //点击按钮来改变股数
    [self.chooseSection textHasChanged];
}




#pragma mark - private

-(void)keyBoardHide{
    NSInteger fund = self.chooseSection.inputFundTextField.text.integerValue;
    if (fund>0) {
        [(BuildStrategyViewController*)self.controller enableConfirmBtn];
    }else{
        [(BuildStrategyViewController*)self.controller disableConfirmBtn];
    }
}


-(void)keyBoardConfirm{
    __weak BuildStrategyViewController* buildController = (BuildStrategyViewController*)self.controller;
    if([buildController isConfirmBtnEnable]){
        
        [self buildRespositoryPreCheck];
    }
}
//正在建仓
- (void)buildOrder
{
    self.cutdownTime = 15;
    DEFINED_WEAK_SELF
    [[ProductsManager shareProductsManager] createBuyOrderByID:self.entity.ID buy_way:@"1" fund:self.chooseSection.inputFundTextField.text stock_amount:self.chooseSection.buyStockAmountLabel.text start_price:self.entity.profitEntity.cur_price Block:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
       
        if (val.result && [entity isKindOfClass:[BuyOrderEntity class]]) {
            
            BuyOrderEntity *e = (BuyOrderEntity *)entity;
            _self.orderEntity = e;
            if (e.order_id != nil) {
              
                [[ViewControllerManager sharedManager]showWaitView:_self.controller.view];
                _self.resultTimer = [NSTimer scheduledTimerWithTimeInterval:3 target:_self selector:@selector(timeFireMethod) userInfo:nil repeats:YES];
                
            }
            
        }
        
    }];
    
    
}
//建仓前校验
- (void)buildRespositoryPreCheck
{
    DEFINED_WEAK_SELF
    float maxPrice = self.entity.profitEntity.y_close.floatValue * 1.1;//涨停价
    NSInteger stockAmount = self.chooseSection.inputFundTextField.text.intValue / maxPrice;
    
    [[ProductsManager shareProductsManager] buildRespositoryPreBuyCheckWithP_id:self.entity.ID buy_way:@"1" fund:self.chooseSection.inputFundTextField.text stock_amount:[NSString stringWithFormat:@"%ld", (long)stockAmount] start_price:self.entity.profitEntity.cur_price stock_code:self.entity.code block:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        
        if (val.result && [entity isKindOfClass:[PreBuyCheckEntity class]]) {
            PreBuyCheckEntity *e = (PreBuyCheckEntity *)entity;
            
            if ([e.result isEqualToString:@"Y"]) {
                
                if ([_self.entity.times isEqualToString:_self.entity.max_times]) {//最后一次平仓
                    
                    [_self lastBuildAlertWithMsg:e.msg];
                }else{//非最后一次，直接建仓
                    
                    
                    [_self buildOrder];
                }
                
            }
            
            
            
        }
        else{
            
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"网络异常" message:@"请点击确认去查看策略是否平仓成功" delegate:_self cancelButtonTitle: @"确认"otherButtonTitles:nil];
            alert.tag = kAlertError;
            [alert show];
            
        }
        
    }];

    
    
}

//15s内刷新建仓状态
- (void)timeFireMethod
{
    self.cutdownTime -= 3;
    DEFINED_WEAK_SELF
    [[ProductsManager shareProductsManager] checkBuyStatusByID:self.orderEntity.order_id Block:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if (val.result && [entity isKindOfClass:[BuyStatusEntity class]]) {
            BuyStatusEntity *e = (BuyStatusEntity *)entity;
            
            if ([e.state isEqualToString:@"3"]) {//成功
                if ([_self.entity.times isEqualToString:_self.entity.max_times]) {//最后一次建仓成功要弹窗
                    
                    [[ViewControllerManager sharedManager]hideWaitView];
                    
                    UIAlertView *lastBuildSuccessAlert = [[UIAlertView alloc] initWithTitle:@"建仓成功!" message:@"您已经完成了全部的建仓策略,祝您投资顺利!" delegate:_self cancelButtonTitle:@"去查看" otherButtonTitles:nil, nil];
                    lastBuildSuccessAlert.tag = KLastBuildSuccess;
                    [lastBuildSuccessAlert show];
                }
                else{//前几次toast
                    
                    [WpCommonFunction showNotifyHUDAtViewCenter:_self.controller.view withErrorMessage:@"建仓成功"];
                    
                    [[ViewControllerManager sharedManager]hideWaitView];
                    //?????
                    [(BuildStrategyViewController *)_self.controller doBack:nil];
                    
                }
                
                [_self.resultTimer invalidate];
                _self.resultTimer = nil;
            }
        }
        
        
        
    }];
    
    if (self.cutdownTime == 0) {//时间为0，建仓失败
        
        [self.resultTimer invalidate];
        self.resultTimer = nil;
        [[ViewControllerManager sharedManager]hideWaitView];
        
        UIAlertView *lastBuildSuccessAlert = [[UIAlertView alloc] initWithTitle:@"建仓失败" message:@"很遗憾,因投资人响应超时,您的策略未建仓成功!" delegate:self cancelButtonTitle:@"确定" otherButtonTitles:nil, nil];
        lastBuildSuccessAlert.tag = KBuildFailed;
        [lastBuildSuccessAlert show];
        
    }
}


//最后一次建仓弹窗
- (void)lastBuildAlertWithMsg:(NSString *)msg
{
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:msg delegate:self cancelButtonTitle: @"确认"otherButtonTitles:nil];
    alert.tag = LastAlert;
    [alert show];
}


-(void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex
{
    if (alertView.tag == LastAlert) {
        
        if (buttonIndex == 1) {//进行建仓
            
            [self buildOrder];
        }
    }else if (alertView.tag == KLastBuildSuccess){
        
        [self.controller.navigationController.navigationController popToRootViewControllerAnimated:NO];
    }else if (alertView.tag == KBuildFailed){
        
        
    }
}

- (NSString *)changeMoneyFormat:(NSString *)money
{
    NSMutableString *moneyStr = [NSMutableString stringWithString:money];
    if (money.floatValue >= 1000) {
        
       [moneyStr insertString:@"," atIndex:moneyStr.length - 3];
        if (money.floatValue >= 1000000) {
            
            [moneyStr insertString:@"," atIndex:moneyStr.length - 7];
        }
        
     }
    
    return moneyStr;
}

- (NSString *)changeStr:(int)money
{   int i = 1000;
    int index = 3;
    NSMutableArray *indexArr = [NSMutableArray array];
    NSMutableString *mutableStr = [NSMutableString stringWithFormat:@"%d", money];
    while (money / i != 0) {
        
        [indexArr addObject:[NSNumber numberWithInt:index]];
        i *= 1000;
        index += 3;
    }
    
    return [NSString stringWithFormat:@"%d", 0];
}

#pragma mark - 刷新Profit

-(void)controllerDidAppear
{
    [super controllerDidAppear];
    [self initTimer];
}

-(void)controllerDidDisappear{
    [super controllerDidDisappear];
    [[WHTimerManager shareTimerManager] removeTarget:self notifyName:kBuildOrderProfitKey];
    [[WHOnceTask shareOnceTask] removeTask:kBuildOrderProfitKey];
}

-(void)initTimer{
    if (![[WHTimerManager shareTimerManager] hasNotifyName:kBuildOrderProfitKey]) {
        [[WHTimerManager shareTimerManager] addTarget:self selector:@selector(refreshProfit) notifyName:kBuildOrderProfitKey];
    }
}

-(void)refreshProfit{
    if ([[WHOnceTask shareOnceTask]expired:kBuildOrderProfitKey validTime:kBuildOrderProfitVal] && self.pTableView.isHidden == NO) {
        NSMutableArray *id_arr = [NSMutableArray array];
        [id_arr addObject:self.entity.ID];
        DEFINED_WEAK_SELF
        if (id_arr.count != 0) {
            
            [[ProductsManager shareProductsManager] refreshProfitByIds:id_arr andBlock:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
                if (val.result && [entity isKindOfClass:[ProfitEntity class]]) {
                    ProfitEntity* pe = (ProfitEntity*)entity;
                    if ([pe.records count]==1) {
                        ProfitRecordsEntity* record = (ProfitRecordsEntity*)pe.records[0];
                        if ([record.state floatValue]>=0) {
                            _self.entity.profitEntity = record;
                        }
                    }
                    [_self.pAdaptor notifyChanged];
                }
            }];
        }
    }
}




-(void)dealloc
{
    
}


@end
