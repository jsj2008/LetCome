//
//  SellRepositoryStrategyBll.m
//  TPM
//
//  Created by admin on 16/7/28.
//  Copyright © 2016年 JYZD. All rights reserved.
//

#import "SellRepositoryStrategyBll.h"
#import "SellStrategySection.h"
#import "SellStrategyViewController.h"
#import "ProfitEntity.h"
#import "SellOrderEntity.h"

#define kAlertError 100
#define kAlertSuccessed 200

@implementation SellRepositoryStrategyBll

+(instancetype)bllWithController:(MyViewController *)controller tableView:(QUTableView *)tableView entity:(SellingListRecordsEntity*)sellEntity{
    SellRepositoryStrategyBll *bll = [self bllWithController:controller tableView:tableView];
    bll.sellEntity = sellEntity;
    return bll;
}

-(void)loadBll
{
    [super loadBll];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoardHide) name:kSellKeyBoardHide object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoardChoseAll) name:kSellKeyBoardChoseAll object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyBoardConfirm) name:kSellKeyBoardConfirm object:nil];
}



-(void)initQuickUI:(QUTableView *)tableView
{
    self.pAdaptor = [QUFlatAdaptor adaptorWithTableView:tableView nibArray:@[@"SellStrategySection"] delegate:self];
    
    [self.pAdaptor.pSources addEntity:[QUEntity entity] withSection:[SellStrategyHeadSection class]];
    [self.pAdaptor.pSources addEntity:[QUEntity entity] withSection:[SellStrategyMiddleSection class]];
    [self.pAdaptor.pSources addEntity:[QUEntity entity] withSection:[SellStrategyChooseSection class]];
    
    [((SellStrategyViewController*)self.controller).confirmSendBtn addTarget:self action:@selector(sellOrder) forControlEvents:UIControlEventTouchUpInside];
}

-(void)QUAdaptor:(QUAdaptor *)adaptor willDidLoadSection:(QUSection *)section willDidLoadEntity:(QUEntity *)entity{
    if ([section isKindOfClass:[SellStrategyChooseSection class]]) {
        
        SellStrategyChooseSection *s = (SellStrategyChooseSection *)section;
        self.chooseSection = s;
        s.controller = self.controller;
        [s.allBtn addTarget:self action:@selector(chooseBtnClicked:) forControlEvents:UIControlEventTouchUpInside];
        [s.halfBtn addTarget:self action:@selector(chooseBtnClicked:) forControlEvents:UIControlEventTouchUpInside];
        [s.oneThirdBtn addTarget:self action:@selector(chooseBtnClicked:) forControlEvents:UIControlEventTouchUpInside];
        [s.oneForthBtn addTarget:self action:@selector(chooseBtnClicked:) forControlEvents:UIControlEventTouchUpInside];
        [s.oneFifthBtn addTarget:self action:@selector(chooseBtnClicked:) forControlEvents:UIControlEventTouchUpInside];
        if (self.sellEntity.times.integerValue>=self.sellEntity.max_times.integerValue-1) {
            [s disableChoseBtn:s.halfBtn];
            [s disableChoseBtn:s.oneThirdBtn];
            [s disableChoseBtn:s.oneForthBtn];
            [s disableChoseBtn:s.oneFifthBtn];
            s.inputFundTextField.enabled = NO;
        }else{
            [s enableChoseBtn:s.halfBtn];
            [s enableChoseBtn:s.oneThirdBtn];
            [s enableChoseBtn:s.oneForthBtn];
            [s enableChoseBtn:s.oneFifthBtn];
            s.inputFundTextField.enabled = YES;
        }
    }
}

-(void)QUAdaptor:(QUAdaptor *)adaptor forSection:(QUSection *)section forEntity:(QUEntity *)entity
{
    if ([section isKindOfClass:[SellStrategyHeadSection class]]) {
        
        SellStrategyHeadSection *s = (SellStrategyHeadSection *)section;
        
        s.dealerReplaceLabel.text = self.sellEntity.dealer_replace;
        s.fundLabel.text = [NSString stringWithFormat:@"投资单元 %ld万",self.sellEntity.fund.integerValue/10000];
        s.curTimesLabel.text = [NSString stringWithFormat:@"%ld",[self.sellEntity.times integerValue]+1];
        s.maxTimesLabel.text = [NSString stringWithFormat:@"限%@次",self.sellEntity.max_times];
        [s updatePercent:([self.sellEntity.times floatValue]+1)*100/[self.sellEntity.max_times floatValue]];
        s.stockNameLabel.text = self.sellEntity.stock_name;
        
    }
    
    if ([section isKindOfClass:[SellStrategyMiddleSection class]]) {
        
        SellStrategyMiddleSection *s = (SellStrategyMiddleSection *)section;
        s.stockNameLabel.text = self.sellEntity.stock_name;
        s.leftAmountLabel.text = [NSString stringWithFormat:@"%ld",self.sellEntity.amount.integerValue-self.sellEntity.sell_amount.integerValue];
        s.buyAvgPriceLabel.text = [NSString stringWithFormat:@"买入价 %.2f元",self.sellEntity.buy_deal_price_avg.floatValue];
        
        
    }
    
    if ([section isKindOfClass:[SellStrategyChooseSection class]]) {
        
        SellStrategyChooseSection *s = (SellStrategyChooseSection *)section;
        s.curPriceLabel.text = [NSString stringWithFormat:@"%.2f",[self.sellEntity.profitEntity.cur_price floatValue]]; 

    }
}

#pragma mark - 按钮

- (void)chooseBtnClicked:(UIButton *)btn
{
    
    [self.chooseSection changeChoseBtn:btn];
    
    NSInteger left_amount = self.sellEntity.amount.integerValue - self.sellEntity.sell_amount.integerValue;
    
    if ([btn.titleLabel.text isEqualToString:@"全部"]) {
        
        self.chooseSection.inputFundTextField.text = [NSString stringWithFormat:@"%ld", left_amount];
        
    }else if ([btn.titleLabel.text isEqualToString:@"1/2"]){
        NSInteger fund = (left_amount / 2)/100*100;
        self.chooseSection.inputFundTextField.text = [NSString stringWithFormat:@"%ld", fund];
        
    }else if ([btn.titleLabel.text isEqualToString:@"1/3"]){
        NSInteger fund = (left_amount / 3)/100*100;
        self.chooseSection.inputFundTextField.text = [NSString stringWithFormat:@"%ld", fund];
        
    }else if ([btn.titleLabel.text isEqualToString:@"1/4"]){
        NSInteger fund = (left_amount / 4)/100*100;
        self.chooseSection.inputFundTextField.text = [NSString stringWithFormat:@"%ld", fund];
    }else if([btn.titleLabel.text isEqualToString:@"1/5"]){
        NSInteger fund = (left_amount / 5)/100*100;
        self.chooseSection.inputFundTextField.text = [NSString stringWithFormat:@"%ld", fund];
    }
    [self keyBoardHide];
}

-(BOOL)checkInputValid{
    NSInteger fund = self.chooseSection.inputFundTextField.text.integerValue;
    NSInteger leftFund = self.sellEntity.amount.integerValue - self.sellEntity.sell_amount.integerValue;
    if (fund%100 > 0 ) {
        [WpCommonFunction showNotifyHUDAtViewBottom:self.controller.view withErrorMessage:@"卖出股票必须为100的整数倍"];
        return NO;
    }
    
    if (fund > leftFund ) {
        [WpCommonFunction showNotifyHUDAtViewBottom:self.controller.view withErrorMessage:@"输入数字超过最大可卖股票数"];
        return NO;
    }
    
    if (self.sellEntity.times.intValue>=self.sellEntity.max_times.integerValue-1 && fund != leftFund) {
    //最后一次必须全平
        [WpCommonFunction showNotifyHUDAtViewBottom:self.controller.view withErrorMessage:@"输入数字超过最大可卖股票数"];
        return NO;
    }
    
    return YES;
}

-(void)keyBoardHide{
    NSInteger fund = self.chooseSection.inputFundTextField.text.integerValue;
    if (fund>0) {
        [(SellStrategyViewController*)self.controller enableConfirmBtn];
    }else{
        [(SellStrategyViewController*)self.controller disableConfirmBtn];
    }
}

-(void)keyBoardChoseAll{
    [self chooseBtnClicked:self.chooseSection.allBtn];
}

-(void)keyBoardConfirm{
    __weak SellStrategyViewController* sellController = (SellStrategyViewController*)self.controller;
    if([sellController isConfirmBtnEnable]){
        DEFINED_WEAK_SELF
        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(.3f * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
            [_self sellOrder];
        });
    }
}


-(void)sellOrder{
    if([self checkInputValid]){
        DEFINED_WEAK_SELF
        [[ViewControllerManager sharedManager] showWaitView:self.controller.navigationController.view];
        [(SellStrategyViewController*)self.controller disableConfirmBtn];
        [[ProductsManager shareProductsManager] sellOrderWithId:self.sellEntity.ID andAmount:self.chooseSection.inputFundTextField.text andPrice:self.sellEntity.profitEntity.cur_price block:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
            [[ViewControllerManager sharedManager] hideWaitView];
            if (val.result) {
                SellOrderEntity* e = (SellOrderEntity*)entity;
                if ([e.result isEqualToString:@"Y"]) {
                    if (_self.sellEntity.times.integerValue >= _self.sellEntity.max_times.integerValue-1) {
                        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"平仓成功" message:@"恭喜！您已经完成了全部的平仓策略" delegate:_self cancelButtonTitle: @"去查看"otherButtonTitles:nil];
                        alert.tag = kAlertSuccessed;
                        [alert show];
                    }else{
                        [WpCommonFunction showNotifyHUDAtViewBottom:self.controller.view withErrorMessage:@"平仓成功"];
                        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(3.f * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                            [(AppViewController*)_self.controller doBack:nil];
                            [[NSNotificationCenter defaultCenter] postNotificationName:kOrderSelled object:nil];
                        });
                    }
                }else{
                    [(SellStrategyViewController*)self.controller enableConfirmBtn];
                    [WpCommonFunction showNotifyHUDAtViewBottom:self.controller.view withErrorMessage:@"平仓失败，请稍候再试"];
                }
            }else{
                [(SellStrategyViewController*)self.controller enableConfirmBtn];
                UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"网络异常" message:@"请点击确认去查看策略是否平仓成功" delegate:_self cancelButtonTitle: @"确认"otherButtonTitles:nil];
                alert.tag = kAlertError;
                [alert show];
            }

        }];
    }
}
-(void)controllerDidDisappear{
    [super controllerDidDisappear];
    [[WHTimerManager shareTimerManager] removeTarget:self notifyName:kSellOrderProfitKey];
    [[WHOnceTask shareOnceTask] removeTask:kSellOrderProfitKey];
}


-(void)controllerWillAppear{
    [super controllerWillAppear];
    [self initTimer];
}

-(void)initTimer{
    if (![[WHTimerManager shareTimerManager] hasNotifyName:kSellOrderProfitKey]) {
        [[WHTimerManager shareTimerManager] addTarget:self selector:@selector(refreshProfit) notifyName:kSellOrderProfitKey];
    }
}

-(void)refreshProfit{
    if ([[WHOnceTask shareOnceTask]expired:kSellProfitKey validTime:kSellProfitVal] && self.pTableView.isHidden == NO) {
        NSMutableArray *id_arr = [NSMutableArray array];
        [id_arr addObject:self.sellEntity.ID];
        DEFINED_WEAK_SELF
        if (id_arr.count != 0) {
                
            [[ProductsManager shareProductsManager] refreshProfitByIds:id_arr andBlock:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
                if (val.result && [entity isKindOfClass:[ProfitEntity class]]) {
                    ProfitEntity* pe = (ProfitEntity*)entity;
                    if ([pe.records count]==1) {
                        ProfitRecordsEntity* record = (ProfitRecordsEntity*)pe.records[0];
                        if ([record.state floatValue]>=0) {
                            _self.sellEntity.profitEntity = record;
                        }
                    }
                    [_self.pAdaptor notifyChanged];
                }
            }];
        }
    }
}

-(void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex{
    if (self.sellEntity.times.integerValue >= self.sellEntity.max_times.integerValue-1) {
        [(AppViewController*)self.controller doBack:nil];
        [[AppUtil findIndex] go2Check:NO];

    }else{
        [(AppViewController*)self.controller doBack:nil];
        [[NSNotificationCenter defaultCenter] postNotificationName:kOrderSelled object:nil];
    }

}


- (void)dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}


@end
