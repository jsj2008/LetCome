//
//  HomeBll.m
//  A50
//
//  Created by  rjt on 15/10/11.
//  Copyright © 2015年 JYZD. All rights reserved.
//

#import "HomeBll.h"
#import "HomeSection.h"
#import "SplitSection.h"
#import "InfomationManager.h"
#import "AdEntity.h"
#import "ScrollNoticeEntity.h"
#import "MyWebViewController.h"
#import "TradeCostStatisticsEntity.h"
#import "ScrollTradeInfoEntity.h"
#import <SDWebImage/UIImageView+WebCache.h>
#import "PushManager.h"
#import "PopupMsgEntity.h"
#import "AgreementFunction.h"
#import "STODBManager.h"

@implementation HomeBll

-(void)loadBll{
    [super loadBll];
}

-(void)controllerWillAppear{
    [self initTime];
    DEFINED_WEAK_SELF
    [[InfomationManager shareInfomationManager] getAd:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if (val) {
            _self.advs = ((AdEntity*)entity).records;
            [_self.pAdaptor notifyChanged];
        }
    }];
    [self refreshTradeInfo];
    
}

-(void)controllerDidAppear{
    [self initTime];
    
}

-(void)initQuickUI:(QUTableView *)tableView{
    if (iPhone6 || iPhone6Plus) {
        tableView.scrollEnabled = NO;
    }
    self.pAdaptor = [QUFlatAdaptor adaptorWithTableView:tableView nibArray:@[@"HomeSection",@"SplitSection"] delegate:self backGroundClr:[UIColor whiteColor]];
    
    QUEntity *entity= [QUEntity entity];
    entity.tag = 100;
    [self.pAdaptor.pSources addEntity:entity withSection:[AdvSection class]];
    [self.pAdaptor.pSources addEntity:[QUEntity entity] withSection:[SplitSection class]];
    [self.pAdaptor.pSources addEntity:[QUEntity entity] withSection:[IndexSection class]];
    [self.pAdaptor.pSources addEntity:[QUEntity entity] withSection:[SplitSection class]];
    [self.pAdaptor.pSources addEntity:[QUEntity entity] withSection:[CalendarSection class]];
    
    self.pAdaptor.pTableView.scrollEnabled = YES;
    
    [self.pAdaptor notifyChanged];
}

-(void)QUAdaptor:(QUAdaptor *)adaptor willDidLoadSection:(QUSection *)section willDidLoadEntity:(QUEntity *)entity{
    if ([section isKindOfClass:[CalendarSection class]]) {
        CalendarSection *s = (CalendarSection *)section;
        _calendarSection = s;
        s.strategyTable.delegate = self;
        s.strategyTable.dataSource = self;
        s.winTable.delegate = self;
        s.winTable.dataSource = self;
    }
    
}

-(void)QUAdaptor:(QUAdaptor *)adaptor forSection:(QUSection *)section forEntity:(QUEntity *)entity{
    
    if ([section isKindOfClass:[AdvSection class]]) {
        AdvSection *s = (AdvSection *)section;
        advSection = s;
        if(_advs){
            [s loadAdvs:_advs];
        }
    }
    
    if ([section isKindOfClass:[CalendarSection class]]) {
        CalendarSection *s = (CalendarSection *)section;
        if (_tradeCostEntity) {
            s.cooperateCostLabel.text = _tradeCostEntity.cooperate_cost;
            s.earnCostLabel.text = _tradeCostEntity.earn_cost;
        }
    }
    if ([section isKindOfClass:[IndexSection class]]) {
        IndexSection *s = (IndexSection *)section;
        [self handleHq:self.hq300Entity priceLabel:s.price300Label rateLabel:s.rate300Label];
        [self handleHq:self.hqCreateEntity priceLabel:s.priceCreateLabel rateLabel:s.rateCreateLabel];
        [self handleHq:self.hqMiddleEntity priceLabel:s.priceMiddleLabel rateLabel:s.rateMiddleLabel];
    }
}

-(void)handleHq:(HqRecordsEntity*)hq priceLabel:(UILabel*)priceLabel rateLabel:(UILabel*)rateLabel{
    if (hq) {
        UIColor *color = [AppUtil colorWithOpen:[hq.YClose floatValue] andNew:[hq.New floatValue]];
        priceLabel.textColor = color;
        rateLabel.textColor = color;
        priceLabel.text = [AppUtil price:hq.New];
        float minus = [hq.New floatValue] - [hq.YClose floatValue];
        NSString *minusPrice = [AppUtil price:[NSString stringWithFormat:@"%f",minus]];
        NSString *rate = [NSString stringWithFormat:@"%.2f%%",([hq.New floatValue] - [hq.YClose floatValue])/[hq.YClose floatValue]*100];
        if (minus>0) {
            rateLabel.text = [NSString stringWithFormat:@"+%@ +%@",minusPrice,rate];
        }else{
            rateLabel.text = [NSString stringWithFormat:@"%@ %@",minusPrice,rate];
        }
    }
}

-(void)initTime{
    if (![[WHTimerManager shareTimerManager] hasNotifyName:kHomeHqRefresh]) {
        [[WHTimerManager shareTimerManager] addTarget:self selector:@selector(refreshHq) notifyName:kHomeHqRefresh];
    }
}


-(void)refreshHq{
    if ([[WHOnceTask shareOnceTask]expired:kHomeHqKey validTime:kHomeHqVal]) {
        NSString *code = @"399005;399006;399300";//中小板指、创业版指、沪深300
        DEFINED_WEAK_SELF
        [[ProductsManager shareProductsManager ] refreshHQWithCode:code Block:^(ReturnValue *val, QUMock *mock, QUEntity *entity){
            if (val) {
                HqEntity *e = (HqEntity*)entity;
                for (HqRecordsEntity* record in e.records ) {
                    if ([record.stockcode isEqualToString:@"399005"]) {
                        _self.hqMiddleEntity = record;
                    }else if([record.stockcode isEqualToString:@"399006"]) {
                        _self.hqCreateEntity =record;
                    }else if([record.stockcode isEqualToString:@"399300"]) {
                        _self.hq300Entity =record;
                    }
                }
                [_self.pAdaptor notifyChanged];
            }
        }];
        
    }
    if ([[WHOnceTask shareOnceTask]expired:kScrollAdvKey validTime:kScrollAdvVal]) {
        [advSection scroll2Next];
    }
    if ([[WHOnceTask shareOnceTask]expired:kTradeInfoKey validTime:kTradeInfoVal]) {
        [self refreshTradeInfo];
    }
    
    if ([[WHOnceTask shareOnceTask]expired:kMsgRefresh validTime:kMsgVal]) {
        [self getMsg];
    }
}


-(void)getMsg{
    if ([UserInfoManager hasLogin]) {
        DEFINED_WEAK_SELF;
        [[PushManager sharePushManager] getPushMsg:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
            if (val.result) {
                PopupMsgEntity *e = (PopupMsgEntity*)entity;
                BOOL flg = NO;
                if (_self.controller.presentedViewController == nil ) {
                    if ([e.popup isEqualToString:@"1"]) {
                        flg = [[AgreementFunction shareAgreementFunction] showMessageWithTitle:e.message_title content:e.message];
                    }else if ([e.popup isEqualToString:@"2"]){
                        flg = [[AgreementFunction shareAgreementFunction] showAgreementWithTitle:e.message_title content:e.message];
                    }
                    
                }
                if (flg) {
                    [[PushManager sharePushManager] readPushMsg:e.ID andBlock:nil];
                }
                
            }
        }];
    }
}

-(void)refreshTradeInfo{
    DEFINED_WEAK_SELF
    [[InfomationManager shareInfomationManager] getTradeCost:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if (val && [entity isKindOfClass:[TradeCostStatisticsEntity class]]) {
            _self.tradeCostEntity = (TradeCostStatisticsEntity*)entity;
            [_self.pAdaptor notifyChanged];
        }
    }];

    [[InfomationManager shareInfomationManager] getTradeStrategyInfoWithNum:@"5" andBlock:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if (val && [entity isKindOfClass:[ScrollTradeInfoEntity class]]) {
            
            _self.strategtInfoes = ((ScrollTradeInfoEntity*)entity).records;
            [_self.calendarSection.strategyTable reloadData];
        }
    }];
    [[InfomationManager shareInfomationManager] getTradeWinInfoWithNum:@"5" andBlock:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if (val && [entity isKindOfClass:[ScrollTradeInfoEntity class]]) {
            _self.winInfoes = ((ScrollTradeInfoEntity*)entity).records;
            [_self.calendarSection.winTable reloadData];
        }
    }];
}

-(void)controllerDidDisappear{
    [[WHTimerManager shareTimerManager] removeTarget:self notifyName:kHomeHqRefresh];
    [[WHOnceTask shareOnceTask] removeTask:kHomeHqKey];
    [[WHOnceTask shareOnceTask] removeTask:kScrollAdvKey];
}

#pragma marks - table delegate
-(NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
    return 1;
}

-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    
    if (tableView == _calendarSection.strategyTable && _strategtInfoes.count<5) {
        return _strategtInfoes.count;
    }else if(tableView == _calendarSection.winTable && _winInfoes.count<5){
        return _winInfoes.count;
    }
    return 5;
}

-(CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath{
    return 65.f;
}



-(UITableViewCell*)tableView:(UITableView *)tableView cellForRowAtIndexPath:(nonnull NSIndexPath *)indexPath{
    UITableViewCell* cell = nil;
    static NSString* cellIdentifyer =@"StrategyCell";
    if (tableView == _calendarSection.strategyTable && indexPath.row<_strategtInfoes.count) {
        if (cell == nil) {
            cell = [(UITableViewCell*)[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifyer];
            NSArray * array = [[NSBundle mainBundle] loadNibNamed:@"HomeSection" owner:self options:nil];
            StrategySection * section = nil;
            for (id s in array) {
                if ([s isKindOfClass:[StrategySection class]]) {
                    section = s;
                }
            }
            CGRect rect = section.frame;
            rect.size.width = cell.contentView.frame.size.width;
            section.frame = rect;
            [cell.contentView  addSubview:section];
        }
        ScrollTradeInfoRecordsEntity *r = _strategtInfoes[indexPath.row];
        StrategySection * section = cell.contentView.subviews[0];
        section.name.text = r.nickname;
        section.stockCode = r.stock_code;
        section.amount.text = [NSString stringWithFormat:@"%ld股",r.stock_amount.integerValue*100];
        section.stockName.text = r.stock_name;

        section.priceLabel.text = [NSString stringWithFormat:@"%.2f",[r.start_price floatValue]];
        section.stopWinLabel.text = [NSString stringWithFormat:@"%.2f",[r.stop_win_price floatValue]];
        
        NSInteger serverTime = [ProductsManager shareProductsManager].serverTime;
        NSInteger minus = serverTime - [r.start_time integerValue];
        if (minus<=60) {
            section.time.text = @"刚刚";
        }else if (minus<=60*5) {
            section.time.text = @"1分钟前";
        }else if (minus<=60*10) {
            section.time.text = @"5分钟前";
        }else if (minus<=60*60) {
            section.time.text = @"10分钟前";
        }else {
            section.time.text = [NSString stringWithFormat:@"%ld小时前",minus/60/60];
        }
        if (indexPath.row + 1 == _strategtInfoes.count) {
            section.splitLine.hidden = YES;
        }else{
            section.splitLine.hidden = NO;
        }
        
        [section.publishBtn addTarget:self action:@selector(publishClicked:) forControlEvents:UIControlEventTouchUpInside ];
        
    }else if(tableView == _calendarSection.winTable && indexPath.row<_winInfoes.count){
        if (cell == nil) {
            cell = [(UITableViewCell*)[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault reuseIdentifier:cellIdentifyer];
            NSArray * array = [[NSBundle mainBundle] loadNibNamed:@"HomeSection" owner:self options:nil];
            WinSection * section = nil;
            for (id s in array) {
                if ([s isKindOfClass:[WinSection class]]) {
                    section = s;
                }
            }
            CGRect rect = section.frame;
            rect.size.width = cell.contentView.frame.size.width;
            section.frame = rect;
            [cell.contentView  addSubview:section];
        }

        ScrollTradeInfoRecordsEntity *r = _winInfoes[indexPath.row];
        WinSection * section = cell.contentView.subviews[0];
        section.name.text = r.nickname;
        section.stockCode = r.stock_code;
        section.amount.text = [NSString stringWithFormat:@"%ld股",r.stock_amount.integerValue*100];
        section.stockName.text = r.stock_name;
        
        section.profit.text = [NSString stringWithFormat:@"%.2f",r.profit.floatValue];
        section.profit.textColor = [AppUtil colorWithProfit:r.profit.floatValue];
        NSInteger serverTime = [ProductsManager shareProductsManager].serverTime;
        NSInteger minus = serverTime - [r.sell_time integerValue];
        if (minus<=60) {
            section.time.text = @"刚刚";
        }else if (minus<=60*5) {
            section.time.text = @"1分钟前";
        }else if (minus<=60*10) {
            section.time.text = @"5分钟前";
        }else if (minus<=60*60) {
            section.time.text = @"10分钟前";
        }else {
            section.time.text = [NSString stringWithFormat:@"%ld小时前",minus/60/60];
        }
        if (indexPath.row + 1 == _winInfoes.count) {
            section.splitLine.hidden = YES;
        }else{
            section.splitLine.hidden = NO;
        }
        [section.publishBtn addTarget:self action:@selector(publishClicked:) forControlEvents:UIControlEventTouchUpInside];
    }
    return cell;
}




-(void)dealloc{
    [[WHTimerManager shareTimerManager] removeTarget:self notifyName:kHomeHqRefresh];
    [[WHOnceTask shareOnceTask] removeTask:kHomeHqKey];
    [[WHOnceTask shareOnceTask] removeTask:kScrollAdvKey];
    [[WHOnceTask shareOnceTask] removeTask:kMsgRefresh];
    
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}


@end
