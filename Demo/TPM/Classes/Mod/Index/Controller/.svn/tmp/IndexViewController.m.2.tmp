//
//  IndexViewController.m
//  TPZ
//
//  Created by  rjt on 16/2/26.
//  Copyright © 2016年 JYZD. All rights reserved.
//

#import "IndexViewController.h"
#import "HomeViewController.h"

#import "MineViewController.h"
#import "InfomationManager.h"
#import "BindInfoViewController.h"

//展示协议用 #import "AgreementFunction.h"
#import "AgreementManager.h"
#import "GetuserUnsignedAgreementEntity.h"
#import "GetAgreementInfoEntity.h"
#import "CheckBuyQualificationEntity.h"
#import "MyWebViewController.h"
#import "StrategyViewController.h"
#import "CheckViewController.h"

#define kDockItemCooperate 0
#define kDockItemStrategy 1
#define kDockItemCheck 2
#define kDockItemMine 3

@interface IndexViewController ()<UIAlertViewDelegate>
{
    BOOL _isBeginLogin;
    NSInteger _wantGoIndex;
    BOOL _hasShow;
}

@end

@implementation IndexViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    // Do any additional setup after loading the view.
    
    //1.初始化所有控制器
    [self initAllControllers];
    //2.这是dock的背景颜色
    
    _dock.backgroundColor = [UIColor colorWithPatternImage:[UIImage imageNamed:@"tab_bg"]];
    //3.添加dock上的item
    [self addDockItem];
    NSLog(@"this is from objc");
    
    //0.添加tabbar切换通知
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(changeTabbarIndex:) name:kChangeTabbarIndex object:nil];
    
    
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(refreshIndex) name:kLoginSuccessed object:nil];
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(refreshIndex) name:kExitSuccessed object:nil];
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(dockReset) name:kExitSuccessed object:nil];
//    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(checkDock:) name:kLoginGiveup object:nil];

    
    
    
    //登陆成功后检查未签署平台协议
    [[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(checkAllUnsignedAgreement) name:kLoginSuccessed object:nil];
    


}

-(void)viewDidAppear:(BOOL)animated{
    [super viewDidAppear:animated];
    // 显示导航条
    [[self navigationController] setNavigationBarHidden:YES animated:NO];
    [[ConfigManager shareConfigManager] checkHotfix];//检查HotFix，避免第一次安装时弹出框被推送提醒挡住
}
-(void)viewWillAppear:(BOOL)animated{
    [super viewWillAppear:animated];
    // 显示导航条
    [[self navigationController] setNavigationBarHidden:YES animated:NO];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}





/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/


-(void)initTimer{
    if (![[WHTimerManager shareTimerManager]hasNotifyName:kDockRefresh]) {
        [[WHTimerManager shareTimerManager]addTarget:self selector:@selector(refreshDockStates) notifyName:kDockRefresh];
    }
}


-(void)refreshDockStates{
    if ([[WHOnceTask shareOnceTask]expired:kDockRefresh validTime:kDockOnceTaskVal]) {
        [self checkDock:nil];
    }
}


- (void)initAllControllers
{
    //合作
    HomeViewController *home = [[HomeViewController alloc] initWithNibName:@"HomeViewController" bundle:nil];
    UINavigationController *homeNav = [[UINavigationController alloc] initWithRootViewController:home];
    [self addChildViewController:homeNav];
    homeNav.delegate = self;
    
    //策略
    StrategyViewController *strategy = [[StrategyViewController alloc] initWithNibName:@"StrategyViewController" bundle:nil];
    UINavigationController *strategyNav = [[UINavigationController alloc] initWithRootViewController:strategy];
    [self addChildViewController:strategyNav];
    strategyNav.delegate = self;
    //账单
    CheckViewController *check = [[CheckViewController alloc] initWithNibName:@"CheckViewController" bundle:nil];
    UINavigationController *checkNav = [[UINavigationController alloc] initWithRootViewController:check];
    [self addChildViewController:checkNav];
    checkNav.delegate = self;
    
    MineViewController *mine = [[MineViewController alloc] initWithNibName:@"MineViewController" bundle:nil];
    UINavigationController *mineNav = [[UINavigationController alloc] initWithRootViewController:mine];
    [self addChildViewController:mineNav];
    mineNav.delegate = self;

}

- (void)addDockItem {
    [_dock addItemWithIcon:@"tab_1" selectedIcon:@"tab_1_s" title:@"合作" titleColor:kTextColor];
    [_dock addItemWithIcon:@"tab_2" selectedIcon:@"tab_2_s" title:@"策略" titleColor:kTextColor];
    [_dock addItemWithIcon:@"tab_3" selectedIcon:@"tab_3_s" title:@"账单" titleColor:kTextColor];
    [_dock addItemWithIcon:@"tab_4" selectedIcon:@"tab_4_s" title:@"我" titleColor:kTextColor];
}


//检查所有未签署协议
-(void)checkAllUnsignedAgreement{
    DEFINED_WEAK_SELF
    [[AgreementManager shareAgreementManager]getuserUnsignedAgreementWithType:@"0" block:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if ([entity isKindOfClass:[GetuserUnsignedAgreementEntity class]]) {
            GetuserUnsignedAgreementEntity *e=(GetuserUnsignedAgreementEntity*)entity;
            if (e.res_data.count>0){
                //NSLog(@"展示未签署协议");
                
                NSMutableArray *IDArray=[[NSMutableArray alloc]initWithCapacity:0];
                for (GetuserUnsignedAgreementRes_dataEntity *ee in e.res_data) {
                    [IDArray addObject:ee.ID];
                }
                GetuserUnsignedAgreementRes_dataEntity *ee=e.res_data[0];
                [_self getAgreementInfoWithID:IDArray[0] title:ee.name];
            }
        }
    }];


}

//根据协议ID弹窗
-(void)getAgreementInfoWithID:(NSString *)ID title:(NSString *)title{
    DEFINED_WEAK_SELF
    //NSString *ID=[NSString stringWithFormat:@"%@",[IDArray objectAtIndex:0]];
    [[AgreementManager shareAgreementManager] getAgreementInfoWithID:ID block:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        if (val.result) {
            GetAgreementInfoEntity *e = (GetAgreementInfoEntity *)entity;
            if (e.content) {
                NSArray *nibContents = [[NSBundle mainBundle] loadNibNamed:@"ProductAgreementView" owner:nil options:nil];
                _self.agreementView  = [nibContents lastObject];
                _self.agreementView.btnClose.hidden=YES;
                //_self.agreementView.agreementViewDelegate = _self;
                
                if (e) {
                    //[_self.controller presentViewController:controller animated:NO completion:nil];
                    
                    _self.agreementView.frame=[UIScreen mainScreen].bounds;
                    _self.agreementView.lblTitle.text=title;
                    
                    NSAttributedString *attrStr = [[NSAttributedString alloc] initWithData:[e.content dataUsingEncoding:NSUnicodeStringEncoding] options:@{ NSDocumentTypeDocumentAttribute: NSHTMLTextDocumentType} documentAttributes:nil error:nil];
                    _self.agreementView.agreementAttributedString=attrStr;
                    _self.agreementView.agreementTextView.font = [UIFont systemFontOfSize:12.f];
                    _self.agreementView.agreementString=attrStr.string;
                    [_self.agreementView fixViewFrame];
                    _self.agreementView.ID=ID;
                    //[_self.view addSubview:_self.agreementView];
                    [[[UIApplication sharedApplication] keyWindow] endEditing:YES];
                    
                    [_self.view addSubview:_self.agreementView];
                    
                }
                
            }
        }
    }];
}


#pragma mark - dockDelegate
-(BOOL)dock:(Dock *)dock canSelectedFrom:(NSInteger)from to:(NSInteger)to{
    
    if([UserInfoManager hasLogin] || to==kDockItemCooperate){
        return YES;
    }else{
        _isBeginLogin = YES;
        _wantGoIndex = to;
        [[PasswordWindow shareWindow] showWithLogin];
        return NO;
    }
}

-(void)dock:(Dock *)dock itemSelectedFrom:(NSInteger)from to:(NSInteger)to{
//    if (to == kDockItemExcute) {
//        [[NSNotificationCenter defaultCenter] postNotificationName:kChangeDockExcuteIndex object:nil];
//    }
    
  
    [super dock:dock itemSelectedFrom:from to:to];
    
}

#pragma mark - tabbar切换通知
- (void)changeTabbarIndex:(NSNotification *)notity {
    if (!notity.object) return;
    [_dock selectDockItem:[notity.object integerValue]];
    [[NSNotificationCenter defaultCenter] postNotificationName:kChangeBuyViewIndex object:@0];
}

-(void)go2Home:(BOOL)animated{
    [_dock selectDockItem:kDockItemCooperate];
    [(UINavigationController*)self.selectedController popToRootViewControllerAnimated:animated];
}

//
//-(void)go2Pay:(BOOL)animated{
//    [_dock selectDockItem:kDockItemPay];
//    [(UINavigationController*)self.selectedController popToRootViewControllerAnimated:animated];
//}
//
//-(void)go2MyStrategy:(BOOL)animated{
//    MineStrategyViewController *controller = [[MineStrategyViewController alloc]initWithNibName:@"MineStrategyViewController" bundle:nil];
//    controller.isNoCooperation=YES;
//    [self.navigationController pushViewController:controller animated:YES];
//}
//-(void)go2Excute:(BOOL)animated{
//    [_dock selectDockItem:kDockItemExcute];
//    [(UINavigationController*)self.selectedController popToRootViewControllerAnimated:animated];
//}
//
//-(void)go2PublishStrategy:(BOOL)animated{
//    [_dock selectDockItem:kDockItemPublish];
//    [(UINavigationController*)self.selectedController popToRootViewControllerAnimated:animated];
//
//}
//
-(void)checkDock:(ManagerReturnBlock)block{
    if ([UserInfoManager hasLogin]) {
        
        [[InfomationManager shareInfomationManager] checkDockState:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
            if(val.result){
                if ([entity isKindOfClass:[NeedNoticecntEntity class]]) {
                    NeedNoticecntEntity *e=(NeedNoticecntEntity*)entity;
                    
                    
                    
                    if ([[e.records objectForKey:@"msg"]intValue]>0) {
                        [_dock changeIconAtIndex:kDockItemMine icon:@"tab_4_new.png" selectedIcon:@"tab_4_s_new.png"];
                    }
                    else{
                        [_dock changeIconAtIndex:kDockItemMine icon:@"tab_4.png" selectedIcon:@"tab_4_s.png"];
                    }
                    
   
                    //按照p_type拼装一个参数
//                    NSString *settle=[NSString stringWithFormat:@"%@_settle",[ProductsManager shareProductsManager].selectedProduct.p_type];
//                    if ([[e.records objectForKey:settle]intValue]>0) {
//                        [_dock changeIconAtIndex:kDockItemCheck icon:@"tab_receivable_news.png" selectedIcon:@"tab_receivable_news_s.png"];
//                    }
//                    else{
//                        [_dock changeIconAtIndex:kDockItemCheck icon:@"tab_receivable.png" selectedIcon:@"tab_receivable_s.png"];
//                    }
                    
                }
            }
            if (block!=nil) {
                block(val,mock,entity);
            }
        }];
        
    }
}

-(void)dockMineReset{
    [_dock changeIconAtIndex:kDockItemMine icon:@"tab_4.png" selectedIcon:@"tab_4_s.png"];
    NSString *time=[NSString stringWithFormat:@"%ld",[[ProductsManager shareProductsManager]getServerTime]];
    NSString *key = @"tab_mine_reset_time";
    [[NSUserDefaults standardUserDefaults] setObject:time forKey:key];
}

-(void)dockReset{
    
    [[WHTimerManager shareTimerManager] removeTarget:self notifyName:kDockRefresh];
    [_dock changeIconAtIndex:kDockItemMine icon:@"tab_4.png" selectedIcon:@"tab_4_s.png"];
//    [_dock changeIconAtIndex:kDockItem icon:@"tab_receivable.png" selectedIcon:@"tab_receivable_s.png"];
}

//-(void)checkPayDock:(ManagerReturnBlock)block{
//    if ([UserInfoManager hasLogin]) {
//        
//        [[InfomationManager shareInfomationManager] checkDockState:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
//            if(val.result){
//                if ([entity isKindOfClass:[NeedNoticecntEntity class]]) {
//                    NeedNoticecntEntity *e=(NeedNoticecntEntity*)entity;
//
//                    //按照p_type拼装一个参数
//                    NSString *settle=[NSString stringWithFormat:@"%@_settle",[ProductsManager shareProductsManager].selectedProduct.p_type];
//                    if ([[e.records objectForKey:settle]intValue]>0) {
//                        [_dock changeIconAtIndex:kDockItemPay icon:@"tab_receivable_news.png" selectedIcon:@"tab_receivable_news_s.png"];
//                    }
//                    else{
//                        [_dock changeIconAtIndex:kDockItemPay icon:@"tab_receivable.png" selectedIcon:@"tab_receivable_s.png"];
//                    }
//                    
//                }
//            }
//            if (block!=nil) {
//                block(val,mock,entity);
//            }
//        }];
//        
//    }
//}


-(void)refreshIndex{

    [self loadUserInfo];
}
-(void)loadUserInfo{
    
    if ([UserInfoManager hasLogin]) {
        [self checkCer];
        if(_isBeginLogin && self == [self.navigationController.childViewControllers lastObject]){
            _isBeginLogin = NO;
            [_dock selectDockItem:_wantGoIndex];
        }else{
            _isBeginLogin = YES;
        }
        [self initTimer];
        [self checkDock:nil];
    }
}

-(void)checkCer{
    DEFINED_WEAK_SELF;
    if ([UserInfoManager hasLogin]) {
        [[ProductsManager shareProductsManager] checkBuyQualify:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
            CheckBuyQualificationEntity* e = (CheckBuyQualificationEntity*)entity;
            if (e) {
                if (![e.result isEqualToString:@"Y"] && [e.reason isEqualToString:@"1"]) {
                    [_self showGo2Cer:e];
                }else{
                    [[NSNotificationCenter defaultCenter] postNotificationName:kCheckComplited object:nil];
                }
            }else{
                [[NSNotificationCenter defaultCenter] postNotificationName:kCheckComplited object:nil];
            }
        }];
    }
}

-(void)showGo2Cer:(CheckBuyQualificationEntity*)entity{
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(.7f * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        if (!_hasShow) {
            [WpCommonFunction messageBoxTwoButtonWithMessage:entity.msg andTitle:@"认证通知" andLeftButton:@"下次通知" andRightButton:@"立即认证" andTag:1 andDelegate:self];
            _hasShow = YES;
        }else{
            [[NSNotificationCenter defaultCenter] postNotificationName:kCheckComplited object:nil];
        }
    });
}

-(void)go2Cer{
    MyWebViewController* controller = [[MyWebViewController alloc]initWithNibName:@"MyWebViewController" bundle:nil];
    controller.url = [NSString stringWithFormat:@"%@/riskcontrol/qualification/index?isvalid=Y&session_id=%@",[ConfigManager shareConfigManager].h5Url,[[UserInfoManager shareUserInfoManager] getSessionID]];
    controller.title = @"认证";
    controller.isBack2History = NO;
    [self.selectedController.navigationController pushViewController:controller animated:YES];
    [[NSNotificationCenter defaultCenter] postNotificationName:kCheckComplited object:nil];
}

-(void)wpAlertViewDelegateYesButtonClick:(id)sender{
    [self go2Cer];
}

-(void)wpAlertViewDelegateNoButtonClick:(id)sender{
    [[NSNotificationCenter defaultCenter] postNotificationName:kCheckComplited object:nil];
}

@end
