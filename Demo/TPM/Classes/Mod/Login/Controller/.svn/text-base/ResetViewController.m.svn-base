//
//  ResetViewController.m
//  QianFangGuJie
//
//  Created by  rjt on 15/4/17.
//  Copyright (c) 2015年 余龙. All rights reserved.
//

#import "ResetViewController.h"
#import "EFTextField.h"
#import "NetResultCode.h"
#import "UserInfoMock.h"
#import "UserInfoEntity.h"
#import "noticeMock.h"
#import "noticeEntity.h"
#import "UIAlertView+RunInMainQueue.h"
#import "UserInfoManager.h"
#import "PushManager.h"
#import "ResetPasswordMaskEntity.h"
#import "ResetPasswordMaskMock.h"
#import "ForgetViewController.h"

typedef enum {
    kPasswordTextFieldTag = 10000,
    kPasswordCheckTextFieldTag = 10001
}TextFieldTag;

@interface ResetViewController ()<UITextFieldDelegate>

@property (weak, nonatomic) IBOutlet EFTextField *pwd;
@property (weak, nonatomic) IBOutlet EFTextField *pwdCheck;
@property (weak, nonatomic) IBOutlet UIButton *confirmBtn;

@property(strong,nonatomic)ResetPasswordMaskMock *mock ;
@property(strong,nonatomic) ResetPasswordMaskParam *param ;

- (IBAction)confirmClicked:(id)sender;

@end

@implementation ResetViewController

- (void)viewDidLoad {

    [super viewDidLoad];

    self.title = @"重置密码";
    // Do any additional setup after loading the view from its nib.
    self.pwd.minLength = 6;
    self.pwd.maxLength = 18;
    self.pwd.type = TextFieldNumberLetter;
    self.pwd.tag = kPasswordTextFieldTag;
    [self.pwd addTarget:self action:@selector(changePwd:) forControlEvents:UIControlEventEditingChanged];
    
    self.pwdCheck.minLength = 6;
    self.pwdCheck.maxLength = 18;
    self.pwdCheck.type = TextFieldNumberLetter;
    self.pwdCheck.tag = kPasswordCheckTextFieldTag;
    [self.pwdCheck addTarget:self action:@selector(changePwd:) forControlEvents:UIControlEventEditingChanged];

    self.confirmBtn.enabled = NO;
    self.confirmBtn.layer.cornerRadius = 3;
    self.userinfomanager = [UserInfoManager shareUserInfoManager];

}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

-(void)changePwd:(UITextField *)textField{
    
    self.pwd.textColor = Color_Bg_222222;
    self.pwdCheck.textColor = Color_Bg_222222;
    if (textField == self.pwd || textField == self.pwdCheck) {
        if (textField.text.length > 18) {
            textField.text = [textField.text substringToIndex:18];
        }
    }
    if([self.pwd isValid]){

        if (![self.pwd.text isEqualToString:@""]&&![self.pwdCheck.text isEqualToString:@""]) {
            self.confirmBtn.enabled = YES;
            [self.confirmBtn setTitleColor:[UIColor colorWithRed:255/255.0 green:255/255.0 blue:255/255.0 alpha:1.0] forState:UIControlStateNormal];
            [self.confirmBtn setBackgroundColor:[UIColor colorWithRed:80/255.0 green:140/255.0 blue:240/255.0 alpha:1.0]];
        }else{
        
            self.confirmBtn.enabled = NO;
            [self.confirmBtn setTitleColor:kColorTextBtnDisabled forState:UIControlStateNormal];
            [self.confirmBtn setBackgroundColor:kColorBgBtnDisabled];

        }
    }else{

        self.confirmBtn.enabled = NO;
        [self.confirmBtn setTitleColor:kColorTextBtnDisabled forState:UIControlStateNormal];
        [self.confirmBtn setBackgroundColor:kColorBgBtnDisabled];
    }
}

-(BOOL)textFieldShouldReturn:(UITextField *)textField{
    [textField resignFirstResponder];
    return YES;
}


-(void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event{
    [self.pwd resignFirstResponder];
    [self.pwdCheck resignFirstResponder];
}


/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

- (IBAction)confirmClicked:(id)sender {
    [self.pwd resignFirstResponder];
    [self.pwdCheck resignFirstResponder];
    
    if ([self.pwd.text isEqualToString:self.pwdCheck.text]) {
        [[ViewControllerManager sharedManager] showWaitView:self.navigationController.view];
        self.mock = [ResetPasswordMaskMock mock];
        self.param = [ResetPasswordMaskParam param];
        self.param.mobile = self.phoneNum;
        self.param.password = self.pwd.text;
        self.mock.delegate = self;
        [self.mock run:self.param];
    }else{
        [WpCommonFunction showNotifyHUDAtViewBottom:self.view withErrorMessage:@"两次输入的密码不一致"];
    }
    
}

-(void)QUMock:(QUMock *)mock entity:(QUEntity *)entity{
    
    if ([mock isKindOfClass:[ResetPasswordMaskMock class]]) {
        [[ViewControllerManager sharedManager] hideWaitView];
        ResetPasswordMaskEntity* e = (ResetPasswordMaskEntity*)entity;
        if(e!=nil && [e.result isEqualToString:@"Y"]){
            [WpCommonFunction showNotifyHUDAtViewCenter:self.view withErrorMessage:@"新密码设置成功"];

            for (NSInteger i=0 ; i < self.navigationController.childViewControllers.count;++i) {
                UIViewController *ctrl = self.navigationController.childViewControllers[i];
                if ([ctrl isKindOfClass:[ForgetViewController class]]) {
                    if (i>0) {
                        [self.navigationController popToViewController:self.navigationController.childViewControllers[i-1] animated:YES];
                    }else{
                        [self.navigationController popToRootViewControllerAnimated:YES];
                    }
                    break;
                }
            }
        }
    }
}


- (void)login{
    DEFINED_WEAK_SELF
    [self.userinfomanager loginWithLoginID:self.phoneNum Password:self.pwd.text LogInType:@"2" ReturnBlock:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        LoginEntity* e = (LoginEntity*)entity;
        if (e!=nil && [e.error_code isEqualToString:code2str(NET_SUCCESS_CODE)]) {
            [_self LoginSuccess:e];
        }
        else{
            [[ViewControllerManager sharedManager] hideWaitView];

            if (_self.pwdDelegate && [_self.pwdDelegate respondsToSelector:@selector(pwdViewControllerSwitchAccount:)]) {
                [_self.pwdDelegate pwdViewControllerSwitchAccount:_self];
            }
        }
    }];
}

#pragma mark -登录成功
-(void)LoginSuccess:(LoginEntity*)e{
    DEFINED_WEAK_SELF
    [self.userinfomanager LoginSuccessShowWithReturnBlock:^(ReturnValue *val, QUMock *mock, QUEntity *entity) {
        kShareAppDelegate.isFirst = NO;
        [[ViewControllerManager sharedManager] hideWaitView];
        [[PushManager sharePushManager] checkDTokenWithUid:[[UserInfoManager shareUserInfoManager] getUserID]];
        
        if (_self.pwdDelegate && [_self.pwdDelegate respondsToSelector:@selector(pwdViewControllerUnlocked:)]) {
            [_self.pwdDelegate pwdViewControllerUnlocked:_self];
        }
    }];
}


@end
